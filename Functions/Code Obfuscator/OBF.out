template <typename oeBrbVzUjn>
oeBrbVzUjn OkKSTGGSyVz(const oeBrbVzUjn& OBrLIVvbqHkWkCGy, const oeBrbVzUjn& oJyzVkZHcBhpPPE) { // OBrLIVvbqHkWkCGy * oHPQArhaanQOaVdDl â‰¡ 1 (oRxPPhnhYhTc oJyzVkZHcBhpPPE)
    assert(OBrLIVvbqHkWkCGy != 0);
    oeBrbVzUjn oHPQArhaanQOaVdDl = 0, oxciWpZoGMQnylv = 1, OrBbypkLsZbckxewo = OBrLIVvbqHkWkCGy, olvLvBXeX = oJyzVkZHcBhpPPE, OImQYwjtJSvWGWtrP;
    while (OrBbypkLsZbckxewo != 0) {
        OImQYwjtJSvWGWtrP = olvLvBXeX / OrBbypkLsZbckxewo;
        std::swap(OrBbypkLsZbckxewo, olvLvBXeX -= OImQYwjtJSvWGWtrP * OrBbypkLsZbckxewo);
        std::swap(oHPQArhaanQOaVdDl -= OImQYwjtJSvWGWtrP * oxciWpZoGMQnylv, oxciWpZoGMQnylv);
    }
    assert(olvLvBXeX == 1);
    return oHPQArhaanQOaVdDl;
}
template<typename Mod>
class oTGlMKgAgDGeqX {
    using OAtfPGjNXBBtbkCgG = typename std::decay<decltype(Mod::value)>::type;
    OAtfPGjNXBBtbkCgG value;
    constexpr static OAtfPGjNXBBtbkCgG oRxPPhnhYhTc() { return Mod::value; }
    template<typename oeBrbVzUjn> oeBrbVzUjn oHLbOZpnthNJ(oeBrbVzUjn OBrLIVvbqHkWkCGy) {
        OAtfPGjNXBBtbkCgG OKhEcAnJMrKdaG = static_cast<OAtfPGjNXBBtbkCgG>(-oRxPPhnhYhTc() < OBrLIVvbqHkWkCGy && OBrLIVvbqHkWkCGy < oRxPPhnhYhTc() ? OBrLIVvbqHkWkCGy : OBrLIVvbqHkWkCGy % oRxPPhnhYhTc());
        return (OKhEcAnJMrKdaG < 0 ? OKhEcAnJMrKdaG += oRxPPhnhYhTc() : OKhEcAnJMrKdaG);
    }
public:
    constexpr oTGlMKgAgDGeqX() : value() {}
    template<typename oeBrbVzUjn> oTGlMKgAgDGeqX(const oeBrbVzUjn &OfxmFfKLbkLYojpOI) { value = oHLbOZpnthNJ(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn> explicit operator oeBrbVzUjn() const { return static_cast<oeBrbVzUjn>(value); }
    const OAtfPGjNXBBtbkCgG& operator()() const { return value; }
    oTGlMKgAgDGeqX& operator+=(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) {
        if ((value += OfxmFfKLbkLYojpOI.value) >= oRxPPhnhYhTc()) value -= oRxPPhnhYhTc();
        return *this;
    }
    oTGlMKgAgDGeqX& operator-=(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) {
        if ((value -= OfxmFfKLbkLYojpOI.value) < 0) value += oRxPPhnhYhTc();
        return *this;
    }
    oTGlMKgAgDGeqX& operator*=(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) {
        if constexpr (std::is_same<OAtfPGjNXBBtbkCgG, int>::value) 
            value = oHLbOZpnthNJ(static_cast<int64_t>(value) * OfxmFfKLbkLYojpOI.value);
        else value = oHLbOZpnthNJ(value * OfxmFfKLbkLYojpOI.value);
        return *this;
    }
    oTGlMKgAgDGeqX& operator/=(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) { return *this *= oTGlMKgAgDGeqX(OkKSTGGSyVz(OfxmFfKLbkLYojpOI.value, oRxPPhnhYhTc())); }
    template<typename oeBrbVzUjn> typename std::enable_if<std::is_integral<oeBrbVzUjn>::value, oTGlMKgAgDGeqX>::type& operator^=(oeBrbVzUjn OfxmFfKLbkLYojpOI) {
        if (OfxmFfKLbkLYojpOI < 0) return *this = oTGlMKgAgDGeqX(OkKSTGGSyVz(static_cast<OAtfPGjNXBBtbkCgG>(1), (*this ^ (-OfxmFfKLbkLYojpOI))()));
        oTGlMKgAgDGeqX OBuZukgsvDn = *this;
        for (*this = static_cast<OAtfPGjNXBBtbkCgG>(1); OfxmFfKLbkLYojpOI; OfxmFfKLbkLYojpOI >>= 1) {
            if (OfxmFfKLbkLYojpOI & 1) *this *= OBuZukgsvDn;
            OBuZukgsvDn *= OBuZukgsvDn;
        }
        return *this;
    }
    oTGlMKgAgDGeqX operator-() const { return oTGlMKgAgDGeqX(-value); }
    oTGlMKgAgDGeqX& operator++() { return *this += 1; }
    oTGlMKgAgDGeqX& operator--() { return *this -= 1; }
    oTGlMKgAgDGeqX operator++(int) { oTGlMKgAgDGeqX OBuZukgsvDn = *this; ++*this; return OBuZukgsvDn; }
    oTGlMKgAgDGeqX operator--(int) { oTGlMKgAgDGeqX OBuZukgsvDn = *this; --*this; return OBuZukgsvDn; }
    oTGlMKgAgDGeqX operator+(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return oTGlMKgAgDGeqX(*this) += OfxmFfKLbkLYojpOI; }
    oTGlMKgAgDGeqX operator-(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return oTGlMKgAgDGeqX(*this) -= OfxmFfKLbkLYojpOI; }
    oTGlMKgAgDGeqX operator*(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return oTGlMKgAgDGeqX(*this) *= OfxmFfKLbkLYojpOI; }
    oTGlMKgAgDGeqX operator/(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return oTGlMKgAgDGeqX(*this) /= OfxmFfKLbkLYojpOI; }
    bool operator==(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return value == OfxmFfKLbkLYojpOI.value; }
    bool operator!=(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return value != OfxmFfKLbkLYojpOI.value; }
    bool operator<=(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return value <= OfxmFfKLbkLYojpOI.value; }
    bool operator>=(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return value >= OfxmFfKLbkLYojpOI.value; }
    bool operator<(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return value < OfxmFfKLbkLYojpOI.value; }
    bool operator>(const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) const { return value > OfxmFfKLbkLYojpOI.value; }
    bool operator!() const { return value; }
    template<typename OgIvtEJXJMoxxU, typename oeBrbVzUjn> friend OgIvtEJXJMoxxU& operator>>(OgIvtEJXJMoxxU& , oTGlMKgAgDGeqX<oeBrbVzUjn>& );
    template<typename oVsAVhiPtcHA, typename oeBrbVzUjn> friend oVsAVhiPtcHA& operator<<(oVsAVhiPtcHA& , const oTGlMKgAgDGeqX<oeBrbVzUjn>& );
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator+(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY + oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator+(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX<oeBrbVzUjn>& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) + OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator-(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY - oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator-(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX<oeBrbVzUjn>& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) - OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator*(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY * oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator*(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) * OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator/(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY / oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator/(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) / OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend typename std::enable_if<std::is_integral<oOIRSkkgZI>::value, oTGlMKgAgDGeqX>::type operator^(oTGlMKgAgDGeqX<oeBrbVzUjn> oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY ^= OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator+=(oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY += oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator-=(oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY -= oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator*=(oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY *= oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator/=(oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY /= oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator==(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY == oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator==(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX<oeBrbVzUjn>& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) == OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator!=(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY != oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator!=(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX<oeBrbVzUjn>& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) != OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator<=(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY <= oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator<=(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) <= OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator>=(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY >= oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator>=(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) >= OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator<(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY < oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator<(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) < OfxmFfKLbkLYojpOI; }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator>(const oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY, const oOIRSkkgZI& OfxmFfKLbkLYojpOI) { return oLsZUMFWY > oTGlMKgAgDGeqX<oeBrbVzUjn>(OfxmFfKLbkLYojpOI); }
    template<typename oeBrbVzUjn, typename oOIRSkkgZI> friend oTGlMKgAgDGeqX operator>(const oOIRSkkgZI& oLsZUMFWY, const oTGlMKgAgDGeqX& OfxmFfKLbkLYojpOI) { return oTGlMKgAgDGeqX<oeBrbVzUjn>(oLsZUMFWY) > OfxmFfKLbkLYojpOI; }
};
template<typename OgIvtEJXJMoxxU, typename oeBrbVzUjn>
OgIvtEJXJMoxxU& operator>>(OgIvtEJXJMoxxU& owUNioikbSveL, oTGlMKgAgDGeqX<oeBrbVzUjn>& oLsZUMFWY) {
    typename oTGlMKgAgDGeqX<oeBrbVzUjn>::OAtfPGjNXBBtbkCgG OPQctstLBKzX; owUNioikbSveL >> OPQctstLBKzX;
    oLsZUMFWY.value = oLsZUMFWY.oHLbOZpnthNJ(OPQctstLBKzX);
    return owUNioikbSveL;
}
template<typename oVsAVhiPtcHA, typename oeBrbVzUjn>
oVsAVhiPtcHA& operator<<(oVsAVhiPtcHA& OgFMOocVPOLyynCd, const oTGlMKgAgDGeqX<oeBrbVzUjn>& OfxmFfKLbkLYojpOI) { return OgFMOocVPOLyynCd << OfxmFfKLbkLYojpOI.value; }
using ModType = int;
constexpr ModType MOD = 1e9 + 7;
using Modular = oTGlMKgAgDGeqX<std::integral_constant<ModType, MOD>>;
// struct OXIZoxhXpmn { static ModType value; };
// ModType &Mod = OXIZoxhXpmn::value;
// using Modular = oTGlMKgAgDGeqX<OXIZoxhXpmn>;
struct Fact {
    std::vector<Modular> ooIQXAzCHSXpzQ, oVbPPWvFWXvhS;
    const int ooJrZNWqn;
    Fact(const int &oYdwmFDhUnyf) : ooIQXAzCHSXpzQ(oYdwmFDhUnyf+1, Modular(1)), oVbPPWvFWXvhS(oYdwmFDhUnyf+1), ooJrZNWqn(oYdwmFDhUnyf) {
        ooIQXAzCHSXpzQ[0] = 1;
        for (int ouDvSloywaOn = 1; ouDvSloywaOn <= oYdwmFDhUnyf; ouDvSloywaOn++) ooIQXAzCHSXpzQ[ouDvSloywaOn] = ooIQXAzCHSXpzQ[ouDvSloywaOn-1] * ouDvSloywaOn;
        oVbPPWvFWXvhS[oYdwmFDhUnyf] = Modular(1) / ooIQXAzCHSXpzQ[oYdwmFDhUnyf];
        for (int ouDvSloywaOn = oYdwmFDhUnyf; ouDvSloywaOn >= 1; ouDvSloywaOn--) oVbPPWvFWXvhS[ouDvSloywaOn-1] = oVbPPWvFWXvhS[ouDvSloywaOn] * ouDvSloywaOn;
    }
    Modular C(const int &oYdwmFDhUnyf, const int &olvLvBXeX) const {
        if (oYdwmFDhUnyf < 0 || olvLvBXeX < 0 || oYdwmFDhUnyf < olvLvBXeX) return 0;
        if (oYdwmFDhUnyf > ooJrZNWqn) throw std::out_of_range("\u0045\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006E\u0020\u003C\u0020" + std::to_string(ooJrZNWqn) + "\u002C\u0020\u0062\u0075\u0074\u0020\u0066\u006F\u0075\u006E\u0064\u0020\u006E\u0020\u003D\u0020" + std::to_string(oYdwmFDhUnyf) + "\u002E");
        return ooIQXAzCHSXpzQ[oYdwmFDhUnyf] * oVbPPWvFWXvhS[olvLvBXeX] * oVbPPWvFWXvhS[oYdwmFDhUnyf - olvLvBXeX];
    }
    Modular A(const int &oYdwmFDhUnyf, const int &olvLvBXeX) const {
        if (oYdwmFDhUnyf < 0 || olvLvBXeX < 0 || oYdwmFDhUnyf < olvLvBXeX) return 0;
        if (oYdwmFDhUnyf > ooJrZNWqn) throw std::out_of_range("\u0045\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006E\u0020\u003C\u0020" + std::to_string(ooJrZNWqn) + "\u002C\u0020\u0062\u0075\u0074\u0020\u0066\u006F\u0075\u006E\u0064\u0020\u006E\u0020\u003D\u0020" + std::to_string(oYdwmFDhUnyf) + "\u002E");
        return ooIQXAzCHSXpzQ[oYdwmFDhUnyf] * oVbPPWvFWXvhS[oYdwmFDhUnyf - olvLvBXeX];
    }
};