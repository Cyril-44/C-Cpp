my $env_in_paths = "It's possible to use environment variables in path, in this form: \$ENV{WORKDIR}/prj1/ . ";
my $builscript_notes = <<"EOT2"
 Run it with --help  switch to see all supported command line options, or see 
 them <a target=helpwindow href=/support/doc/obfusui/buildscript.shtml>here</a>.<p>

 Once you add or  remove files to project, you'll have to regenerate the script.<p>

 You can regenerate the buildscript from command line too (it's handy if you store your .op file in Git), see 
 Help &rArr; generate-buildscript-from-project-file.pl.<p>    
EOT2
;

$a = <<"EOT"


menu.settings.unlistedfiles You can specify processing mode to handle with for
 for files for which you didn't assign processing mode
 in Project&rArr;Files explicitly (i.e. the ones that have "NOT IN THE PROJECT" near them
 in Project&rArr;Files). Specify pattern for filename, and processing mode for them there.

#this is same for obfuscators too
prj.listofmodes Processing modes instruct how to handle files. Each file has a
 single processing mode assigned to it.
 The "special modes" are modes that can't be assigned to files in
 Project&rArr;Files. The purpose of "special modes" is for inherriting from them.
 "End-user modes" can be assigned to files in Project&rArr;Files.

mode.title Title of the mode. Can contain any characters. It's used in drop-down
 lists, so use short titles if possible (20-30 characters).

mode.parent Select name of the mode from which protection settings will be
 inherrited. If the checkbox before the protection setting is checked, the
 specified value of setting  will be used, otherwise it will be inherrited from
 the parent mode. 

mode.filer_visible Specifies whether the mode can be assigned
 to the file of the project.
 If you wish to have some mode just for inheriting protection settings by child
 modes from it, uncheck this checkbutton.

prj.title This is a title of the project, arbitrary long. Give descriptive
 title (feel free to insert commentary information and e.g. date and time),
 since when choosing project to open, you'll be presented with a list of project
 titles only.

prj.stdir Directory that will contain various state files for your project -
 lists of extracted symbols, buildscripts and other types of files.
 ${env_in_paths}
 Cleaning it  will slow down 
 rebuilding process, so don't assign the name to the common temporary directory
 for  your operating system or user account; that directory shouldn't be shared
 with other
 projects, or strange behaviour is guaranteed. The content of this directory is
 autogenerated automatically if lost, so feel free to clear it once you've
 finished protecting your project.

prj.testcmd A command that is run when you invoke Build&rArr;Rebuild changed & Test 
 once rebuilding is complete. This setting is optional. Useful for starting
 browser or validator for the protected project. The current directory is set to
 input directory of the project when invoking that command.

prj.codetype Type of majority of code your project contains. Selecting proper 
 type increases chances for automatic mode assignment to guess type of each file
 of your project properly (though of course you will be able to specify file
 type manually).

prj.indir Topmost directory that contains all files of your project. Output
 directory and directory for state files should not be subdirectories of it.
 ${env_in_paths}

prj.outdir Directory that will contain protected version of your project. 
 ${env_in_paths} 
 All  subdirectories your project has will automatically be created in it. It's
 possible  and very recommended to use directory names relative to the Input
 directory name -  this way you won't have to change much in the project options
 if you will decide to move project to the new directory; it will make
 hand-editing of exported buildscripts easier.


prj.precmdline Give the name of command that will be executed before building
 the project. It's useful for e.g. checking your project out of some version
 tracking system or cleaning intermediate files. 
 <p>The command is executed with  current directory set to project's input directory.

prj.postcmdline Give the name of command that will be executed after building
 the project. It's useful for e.g. copying additional files to project's output
 directory or postprocessing protected files. 
 <p>The command is executed with  current directory set to project's input directory.


prj.symbols_subdir Specify the location of directory where names of symbols (e.g.
 user-specified exceptions) are stored, relative to project's input directory.
 If you wish them to be stored outside of project's input directory, enter relative
 path, e.g. "../symlists".

prj.process_files_one_by_one Force processing files one by one (instead of
 all files of the same type by a single run of the backend). Enable this only if 
 you are trying to trace the problem in the backend itself, since otherwise it
 will slow down build process a lot.

prj.description Optional. Put project description here. HTML markup allowed, including links. 
 It will be shown as tooltip in Project&rArr;Open screen.


prj.perlpath Specify path to perl to use for protecting Perl script (that installation of Perl
 should contain all external modules your code uses).

#menus

menu.settings.files View the list of files in project's input directory, add or 
 remove files (located in project's input directory) from project, assign 
 different processing modes to specific files, force or block rebuilding of 
 some files.

menu.project.new Create new project.

menu.project.open Open an already created project.

menu.project.import Import a previously exported project. Use this e.g. for
 moving projects from computer to computer or for creating a project's copy
 (e.g. to try it with new settings).

menu.project.export.export.native Export a  project e.g. for moving it to other
 computer, for making backup copy of it or for creating project's copy (e.g. to
 try it with new settings). Use Project, Import for importing exported project.

menu.project.close Close project in this window (e.g. in order to open other
 project). It's possible to open several windows at once, each dedicated to a
 different project.

menu.project.browse.output Open Project's output directory in file browser.

menu.project.browse.input Open Project's input directory in file browser.

menu.settings.switchbase.code Select the profile for protecting code in the
 project - in raw files and inside some client-side or server-side
 languages markup.
 Profile for jamming of redundant spaces around html tags and removing html
 comments is selected using "Project&rArr;Switch mode for mangling html markup
 around code.." menu item; profile for encoding of scripts also has a separate
 menuitem.

menu.settings.switchbase.html Select the profile for jamming redundant whitespace
 between html tags and removing HTML comments. It will not affect jamming
 whitespaces and removing comments inside the scripts!! The profile for mangling
 scripts can be selected using "Project&rArr;Switch debugging/production mode for
 code mangling.." menu item.

menu.settings.switchbase.encoding Select the profile for encoding of code in your
 project - in raw files and inside some client-side or server-side markup.

menu.project.export.export.buildscript Produce a script that allows to perform
 all  building-related operations (like rebuilding all, rebuilding just changed files
 or clearing all output files) for your project from commandline.
 <p> 
 ${builscript_notes}
 <p>
 Script is implemented in Perl.

menu.project.export.export.bat Produce a .bat files (Windows-only) - a script that allows to perform
 all  building-related operations (like rebuilding all, rebuilding just changed files
 or clearing all output files) for your project from commandline. 
 <p>
 ${builscript_notes}


menu.project.stop.spws-terminate-and-release-cd Stop the Stunnix Web Server that
 serves Project Manager's pages. This interface is web-based, with web server
 running on your computer. You may wish to stop GUI in case you need to upgrade
 to the newer version of Project Manager or to move Project Manager to another
 directory (or for uninstalling the product completely).

menu.settings.options Alter the options of the project line input or output directory or delete the project.


menu.settings.modeoptions Alter the settings of processing modes.



menu.build.rebuild.changed Rebuild only files that have changed since previous 
 build of your project. This takes much less time than complete rebuilding of
 all files if you've changed just single file, especially if your project
 consists of a huge number of files.

menu.build.rebuild.all Rebuild all files irrespective of whether fresh
 protected version exists or not in Project's output directory.

menu.build.rebuild.all.test Rebuild all files irrespective of whether fresh
 protected version exists or not in Project's output directory, and then run 
 test command specified in Project&rArr;Options.

menu.build.clear_output Erase all files in project's output directory.

menu.build.clear_output_and_rebuild Clear project's output directory first, then
 copy all relevant files from project's input directory (and relevant utility
 files like php interpreter and so on).

menu.build.rebuild.changed.test Rebuild all files that have changed since
 previous build, and run test program (specified in Project&rArr;Options).

menu.build.clear_all This clears all information that can be regenerated in
 Project's output and state directories. Use this e.g. before taking backup of
 your hard disk or when transferring your project to other computer.

menu.build.clear_all.rebuild.all This is the same as doing 'clear output and state files'
    and then doing 'Rebuild all'.

menu.build.clear_state This clears all files that can be automatically
 regenerated during 'Build&rArr;Rebuild All' in project's state directory (symbol
 mapping files, autoextracted exceptions and so on).

menu.tools.cmdbuilder Run a tool that allows you to build commandlines for 
 obfuscator using web interface. The commandlines it generates do not depend on
 the project's settings at all.

menu.tools.changeskin Select a "skin" to use for Project Manager interface.

menu.tools.axextract Extract symbols from ActiveX components registered in your
 system. The generated list can be used as list of exceptions (e.g. names of
 functions from ActiveX component your code can call) or list of
 suffixes to keep in symbols (names of events).

menu.syms.edituser.quotednames If you have strings containing just symbol names, you
 can list names of those symbols here, and strings containing just those symbols
 will be updated - the symbol will be replaced with its mangled version.<p>
 Given this line in your code:<br>
    &nbsp;&nbsp;<tt>myfunc("foo");</tt><br>
  If you add <tt>foo</tt> on this screen, that line will become<br>
    &nbsp;&nbsp;<tt>zb1bd67("z58412e");</tt> <br>
  If you don't add <tt>foo</tt> here, it will become<br>
    &nbsp;&nbsp;<tt>zb1bd67("foo");</tt>

menu.syms.edituser.main Edit a list of symbols that shouldn't be renamed in your
 project (besides ones extracted automatically). The values specified here are case-sensitive.
 <p>
 Given this line in your code:<br>
    &nbsp;&nbsp;<tt>foo(12);</tt><br>
  If you add <tt>foo</tt> on this screen, that line will become<br>
    &nbsp;&nbsp;<tt>foo(12);</tt><br>
  If you don't add <tt>foo</tt> here, it will become<br>
    &nbsp;&nbsp;<tt>zb1bd67(12);</tt>

menu.syms.edituser.maini Edit a list of symbols that shouldn't be renamed in
 your project (besides ones extracted automatically) independant of which case
 of letters was used in their name (case-insensitive).

menu.syms.edituser.anti  Edit a list of symbols that should be ignored in lists
 of exceptions (user-specified lists or lists created automatically) - i.e. the
 names that NEED to be replaced during obfuscation. E.g. if you need name of
 html form control that was autoextracted to still be replaced, put that name 
 here.

menu.syms.edituser.suffix  Specify a list of suffixes to preserve in symbols
 being renamed (useful for names of events that should be left in the names of
 methods that receive events in ASP or from ActiveX components).

menu.syms.edituser.mapping  Specify desired replacements for some particular
 symbols in your source code. This is a very rarely-used functionality.

menu.syms.view.autoextracted  View list of symbols that were automatically
 extracted from your files (e.g. IDs of client-side or server-side HTML
 objects, names of forms and form controls).

menu.syms.view.mapping  View effective symbol mapping for your project. 

menu.syms.choose_except_by_header Choose whether to load exceptions for header files
 your project uses, and what set of exceptions to load if several header files
 have the same name.

menu.tools.syms_from_dir Collect names of variables, functions and types declared in
 files from a directory you specify.

menu.tools.patchtrial Upgrade your trial edition of obfuscator into non-trial after
 purchasing the product in the Store (requires serial and a patch download).

menu.syms.strings View all strings encountered in your code in order to decide
 what symbols to add to the list of exceptions.

menu.tools.installscripts Install command line interface to various scripts and backends to
 any directory (e.g. one listed in your PATH environment variable), and then invoke them from 
 that directory.
 <p>This eliminates the need to hardcode paths  where Obfuscator was installed to in your scripts.




menu.syms.gen_from_comp_db Generate exceptions individually for each file, using Clang-based tool.
    Clang is a modern compiler suite, and it is the default compiler for iOS, macOS, FreeBSD and OpenBSD. 

compdb.compiler Specify compiler to use. You can use <tt>which</tt> command and backticks to compute
    path to compiler using shell <tt>which</tt> utility. <p>C++ compiler will be used for C++ source files,
    C compiler will be used for C source files.


compdb.compiler-options <p>Specify compiler commmand line options specific to C or C++ language. Most important options
    are language standard to support, or macros that are defined using command line (after <tt>-D</tt>
    command line option, e.g. <tt>-DFOO=1</tt> defines macro <tt>FOO</tt> to expand to <tt>1</tt>).
    <p/>
    Define only the macros that affect visibility of some pieces of your code or that control which functions or members
    are available (i.e. the ones that are checked <tt>#ifdef/#ifndef</tt> directives).
    <p/>You can use backtick operator to substitute the out of certain command, e.g. <tt>`xml-config --cflags`</tt>.


compdb.compiler-options-cmn <p>Specify commmand line options common for both C and C++ compilers. Most important options
    are telling compiler where to search for headers (e.g. <tt>-I/usr/local/include</tt> tells compiler to search for
    headers in <tt>/usr/local/include</tt>) and for defining macros (<tt>-DFOO=1</tt> 
    defines macro <tt>FOO</tt> to expand to <tt>1</tt>).
    <p/>You can use backtick operator to substitute the out of certain command, e.g. <tt>`xml-config --cflags`</tt>.


prj.cxx_ignore_exceptions_by_header If you check this checkbox, exceptions specified via 
    <a class=menuref href=syms.choose_except_by_header>Symbols 
    &rArr; "Select which common header files to load exceptions for"</a>
    will not be loaded.
    It makes sense to enable this only if you use Clang-based symbol extractor (<a class=menuref 
    href=syms.gen_from_comp_db>Symbols &rArr; "Generate exceptions using Clang-based tool"</a>). 
    <p>
    By checking this checkbox: you will get less unnecessary
    symbols obfuscated. But unfrotunately, in some cases Clang-based symbol extractor may not extract all symbols needed,
    so you will have to list several symbols manually.
    <p>By default, this checkbox is unchecked.

prj.cxx_per_file_exceptions_are_not_aggregated If you check this checkbox, exceptions extracted via
    Clang-based symbol extractor will be loaded on a per-file basis, i.e. each file will be using its own
    list of exceptions, as provded by Clang-based symbol extractor. This will result in less symbols 
    to be mangled in each file, but there is a chance that you will need to list some symbols as exceptions manually
    in <a class=menuref href=syms.edituser.main>Symbols &rArr; Edit user-specified exceptions</a>.
    <p>
    If you keep this checkbox unchecked, exceptions extracted for all files using Clang-based symbol extractor will
    be merged into a single set, and that set will be applied to all files in the project. 
    <p>By default, this checkbox is unchecked.

EOT
;
