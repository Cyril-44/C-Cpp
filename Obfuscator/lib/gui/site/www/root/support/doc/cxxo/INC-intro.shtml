<!---BEFORE_DOC_CONTENT-->
			    
<h4>Table of contents</h4>
<ul>
<li><a href=#keyfacts>Key facts</a>
<li><a href=#exceptions>Key concept: exceptions - names of symbols that should not be modified</a>
<li><a href=#steps>Steps for obfuscating the project with C/C++ Obfuscator</a>
</ul>


<a name=keyfacts></a>
<h1>Key facts about C/C++ Obfuscator</h1><p>

<ul>
<li>It never overwrites input files.
<li>It has both GUI and command line interfaces. GUI uses command line interface under the hood, but GUI
    adds some handy tools, so GUI interface is more powerfull and feature-rich and is more recommended to use.
    <p>
    It's really greatly recommended to  use GUI interface to set up the project.
    Later you can export scripts (or .bat files for Windows) that allow you to build/rebuild/clean your project
    from command line  - they are called <a href=buildscript.shtml>buildscripts</a>.
    <p>
    And if you insist on never using GUI interface (it's very bad idea!) you can still generate command line
    using GUI on your computer (go to <span class=menuref>Tools &rArr; Command line builder</span>) 
    or online command line builder available 
    <a href=http://stunnix.com/support/interactive/cmd-builder/cl-cxxo.shtml>on our site</a>.
    
<li>Trial version can perform only one kind of transformation for symbol names - by prepending string
    <code>ReplacementFor_</code> to them. This does not limit your ability to evaluate  C/C++ Obfuscator in any way!


    The trial version does allow you to fully evaluate  C/C++ Obfuscator and prepare your project for obfuscation 
    using only trial edition.  
    <p>
    Just imagine that instead of <code>ReplacmentFor_someFunction</code> you'll get  <code>z78a4b2e</code>. 
    Those symbols that got prefix with trial version will become something unreadable when protected by non-trial.
    It's easier to prepare project for obfuscation using this kind of replacement (when some prefix is prepended), 
    so it's called a debug mode. Using debug mode is recommended when using non-trial version of the product too! - 
    as it allows to understand what's going on much easier (you'll get errors looking like
    <tt>"unknown symbol ReplacementFor_someFunction"</tt> 
    instead of <tt>"unknown symbol z72a63be9f"</tt> - the former is much more readable when debugging!).
    <p>
    Once you created a project, prepared it for protection using trial, you can purchase non-trial, just open that 
    project in non-trial edition, click <span class=menuref>Build &rArr; Rebuild all</span> 
    and you'll get your project fully protected.
    So you won't loose any time spent evaluating trial edition.

<li>Default settings and values of parameters are safe and reasonable.
<li>Obfuscation of the project is not as quick as zipping the folder with source code - you have to confiure
    your project (by listing names that should not be modified, called exceptions) 
    . So be ready  to spend from hours to days before you get protected version of your code that works correctly
    after obfuscation.
   
</ul>

<a name=exceptions></a>
<h1>Key concept: exceptions - names of symbols that should not be modified</h1><p>

The purpose of C/C++ Obfuscator is to replace symbols with meaningless names.
Apparently, not all symbols can be changed without introducing errors.
For example, names 
    

    

    

    
of macros that you pass via compiler's command line 

can not be changed. Names of such symbols
should be added to the list of <b>exceptions</b> - so obfuscator does not change them  
    
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.
<p>


<h2>Symbols defined in 3rd-party  libraries </h2><p>
If your code calls some functions from 3rd-party  libraries  





available to you only in binary form


, you have to list all symbols that you use from those  libraries  as exceptions

<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.

<p>
C/C++ Obfuscator ships with a lot of tools that help generating exceptions for 3rd-party  libraries 

<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>    
.



<h2>Exporting symbols to 3rd parties</h2><p>

If your code is in fact a   library  that you sell or distribute, then you have to list as exceptions  
all symbols defining its API
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.

Use tools shipped with C/C++ Obfuscator to generate exceptions for API of your  library 

<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>    

























<a name=steps></a>
<h1>Steps for obfuscating the project with C/C++ Obfuscator</h1><p>






<a name=step1></a>
<h2 class=step>Step  1: collect set of exceptions for your code</h2><p>

A lot of tools for this are shipped with C/C++ Obfuscator
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>    
 





<a name=step2></a>
<h2 class=step>Step  2: process your code using lite protection and test it</h2><p>


With lite protection, names of symbols that are to be made unreadable, will just get <code>ReplacementFor_</code> prefix.
This will result in error messages looking like <tt>"Undefined function ReplacementFor_SomeFunctionName"</tt>
when you'll try to compile or run your code - it will clearly indicate that
symbol <code>SomeFunctionName</code> should be added to the list of exceptions
(see more on what exceptions are <a href=#exceptions>here</a>).

<p>
Proceed to next step only if your protected code works fine.




<a name=step3></a>
<h2 class=step>Step  3: process your code using non-lite protection and test it</h2><p>

After switching protection mode to non-lite, your code should work exactly as when protected by lite protection.
Note that <b>trial</b> version of C/C++ Obfuscator can perform only one kind of transformation for symbol names - 
by prepending prefix  <code>ReplacementFor_</code> to them. This does not limit your ability to evaluate  C/C++ Obfuscator in any way
as mangling integers and strings in non-lite mode is the same for both trial and non-trial, so once you tested your code
protected with trial in non-lite mode, you will need only minimal testing of code once upgrading trial into non-trial of
 C/C++ Obfuscator.







<style type=text/css>
a.docref:before { content: "[see \""; }
a.docref:after { content: "\"]"; }
a.docref { font-size: 70%; }

h2 { font-size: 120%; padding-top: 1em; padding-left: 2em; }
dl { padding-top: 0em; } 

.menuref { font-style: italic; } /* references to menu items */

span.wrap_condition { border: solid 1px black; }
span.wrap_condition_0 { background: #ffe; }
span.wrap_condition_1 { background: #fef; }
span.wrap_condition_2 { background: #eff; }
span.wrap_condition_3 { background: #eef; }
</style>

<!---AFTER_DOC_CONTENT-->
