<!---BEFORE_DOC_CONTENT-->
			    
<div class=doc-guide>

<h1>Key facts you need to know</h1><p>
<ul>
<li>Please read <a href=intro.shtml>VBScript Obfuscator: Introduction and Key Concepts</a> first. 


<li>In order to call command line interface of VBScript Obfuscator and other utilities shipped with it
    without mentioning path to those utilities,
    start Project Manager, go to <span class=menuref>Tools &rArr; Configure command line tools..</span>,
    and specify any directory listed in your PATH environment variable there. Aliases will be installed to
    that directory, so you will be able to simply type <code>vbs-obfus</code> in Terminal.

<li>It's VERY VERY bad idea to call vbs-obfus directly! It's much more recommended to 
    create and operate a project in Project Manager. You can build a project from command line easily: 
    for each project, it's possible to generate a commandline script (or .bat file for Windows)
    that will perform all operations available
    via the Build menu of Project Manager (i.e. building, rebuilding and cleaning of the project)
    by going to  <span class=menuref>Project &rArr; Generate buildscript</span> or
    <span class=menuref>Project &rArr;  Generate buildscript as .bat file</span>.
    <p>
    The documentation on using generated buildscripts is 
    <a href=buildscript.shtml>available here</a> - it lists all command line flags it supports.
    So please go to <a href=guide-gui.shtml>step-by-step guide using GUI (Project Manager)</a>,
    and stop reading this document - as it describes inferior and old approach of using  VBScript Obfuscator 
    directly from command line, you can use this approach only if you have to support already 
    existing project that uses  VBScript Obfuscator  directly via command line.

<a name=cmdbuilder></a>
<li>There is nice GUI tool to generate command line using GUI, available at 
    <span class=menuref>Tools &rArr; Command line builder</span>. So you don't need to read documentation on
    command line options of <code>vbs-obfus</code>, just use  Command line builder to generate command line
    options.
    <p>
    Also there is an online version of Command line builder 
    <a href=http://stunnix.com/support/interactive/cmd-builder/cl-vbso.shtml>here</a>, so you can avoid starting GUI.


</ul>


<h1>Step-by-step guide using command line</h1><p>
<ol>
<li>Update use of symbol names in your code mentioned in <code>eval()</code>, by wrapping names of symbols, 
    into calls of <code>OBJNAME()</code>. See more details <a href=intro.shtml#objname>here</a>.


<li>Test your code, ensuring that it works fine after these changes.

<li>Create a directory where files protected version of your code will be placed.

<li>Create some script or Makefile that invokes <code>vbs-obfus</code>, that handles all
    your files; make sure that it allows you to edit command line options applied to all invocations of 
    <code>vbs-obfus</code> in a single place, as you will have to run <code>vbs-obfus</code>
     on your entire project several times, with different command line options 

<li>Create a directory named <code>exceptions</code> in  the same directory where your code resides.
    You will be adding exceptions to it -  a list of symbol names that should not be changed, one per line.
    You will store each group of exceptions to separate file, e.g. exceptions extracted automatically
    should go to <code>exceptions/auto.txt</code>, exceptions composed manually should go to 
    <code>exceptions/manual.txt</code>.	
    In order to tell <code>vbs-obfus</code> to read exceptions from all files in that directory, append
    <code>-x exceptions</code> to <code>vbs-obfus</code> command line.

<li>Add as many libraries that your code uses into directory  with your code
    

    and modify your Makefile or script so those libraries are also processed.
    
    Doing this will reduce the number of libraries     that you will be generating exceptions for in the 
    next steps.
    


<li>Read introduction on <a href=intro.shtml#exceptions>what exceptions are</a>.




<li>Generate names of symbols that you are using from a libraries that you are not obfuscating along your project
    
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>

    and store it to file named <code>auto.txt</code> in <code>exceptions</code> directory.

<li>Put all exceptions that were not extracted by other tools (i.e. exceptions that you've collected manually),
     to file named 
     <code>manual.txt</code>  in <code>exceptions</code> directory (one symbol per line).

<li>Generate names of symbols that you export to other developers
    
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>
,
    store them to file named
     <code>exported.txt</code>  in <code>exceptions</code> directory (one symbol per line).






<li>Build your project with  lite level of protection. 
    To achieve this, append <br><code>
-x exceptions -i prefix -n none -s none -jam 0
    -e 0
</code><br>
    to command line of <code>vbs-obfus</code> generated by <a href=#cmdbuilder>command line builder</a>.
    <p>
    It will produce code that is rather easy to read.
    All symbols   that are subject to mangling will get <code>ReplacementFor_</code> string prepended to them.


<li>Now try to run your protected code from the output directory, testing all paths of control if possible.
    If you get interpreter errors like "<tt><code>ReplacementFor_FunctionName</code> can't be found</tt>",  most probably it means 
    that <code>FunctionName</code>  is a symbol from 3rd-party library.
    Either try to add that library to your project (so its code also gets obfuscated), or 
    add its symbols to the list of exceptions 
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>

    by extracting its symbols  
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>
.
    If you've already done extraction of its symbols, it probably means that extraction did not find 
    some symbols, so you have to add them manually to file <code>manual.txt</code> in <code>exceptions</code> directory.    



<li>Erase all output files and repeat 2 last steps  until  you get no errors 
    running your protected code.



<li>Erase all output files.

<li>Build your project with production level of protection. 
    To achieve this, append <br><code>
-x exceptions 
</code><br>
    to command line of <code>vbs-obfus</code> generated by <a href=#cmdbuilder>command line builder</a>.

<li>Perform very minor checks that protected code works fine.
    
<li>Your product will then be ready for shipping.
</ol>

If something still doesn't work, make sure you've read the recommendations in the NOTES section of the 
<code>vbs-obfus</code> <a href=vbs-obfus.shtml#notes>manual</a>. 


<!-- 
 You can put all 3rd-party libraries you use in your code 
    (or header files defining their APIs, in case of C/C++) to the same directory. 
    Simply go to <i>Tools, Extract symbols from directory with source files</i>, enter the 
    name of that directory, select symbol types you wish to gather, and get the list of symbols 
    defined in that directory. Cut them, then paste to <i>"Symbols, User-Specified exceptions"</i>.


-->

</div>







<style type=text/css>
div.doc-guide li { padding-top: 0.7em; }
a.docref:before { content: "[see \""; }
a.docref:after { content: "\"]"; }
a.docref { font-size: 70%; }

h2 { font-size: 120%; padding-top: 1em; padding-left: 2em; }
dl { padding-top: 0em; }

.menuref { font-style: italic; } /* references to menu items */

span.wrap_condition { border: solid 1px black; }
span.wrap_condition_0 { background: #ffe; }
span.wrap_condition_1 { background: #fef; }
span.wrap_condition_2 { background: #eff; }
span.wrap_condition_3 { background: #eef; }
</style>

<!---AFTER_DOC_CONTENT-->
