
<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<LI><A HREF="#options">OPTIONS</A></LI>
	<LI><A HREF="#notes">NOTES</A></LI>
</UL>
<!-- INDEX END -->

<HR>
<P>
<HR>
<H1><A NAME="name">NAME</A></H1>
<P>gen-ident-exceptions.pl - a script to gather a names of symbols exported
by external modules that a set of perl files uses.</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<P><STRONG>gen-ident-exceptions.pl</STRONG> 
    [&nbsp;<STRONG>--include-symbols-from-exporter</STRONG>&nbsp;]&nbsp;
    [&nbsp;<STRONG>-p</STRONG>&nbsp;<EM>perl-path</EM>&nbsp;]&nbsp;[&nbsp;<STRONG>-d</STRONG>&nbsp;<EM>dir-prefix-to-exclude</EM>&nbsp;]..
    [&nbsp;<STRONG>-u</STRONG>&nbsp;<EM>user-exceptions-file</EM>&nbsp;]&nbsp;..   
    [&nbsp;<STRONG>-U</STRONG>&nbsp;<EM>user-exception-comma-sep-list</EM>&nbsp;]&nbsp;..
    [&nbsp;<STRONG>-m</STRONG>&nbsp;<EM>module-exceptions-file</EM>&nbsp;]&nbsp;.. 
    [&nbsp;<STRONG>-M</STRONG>&nbsp;<EM>module-exception-comma-sep-list</EM>&nbsp;]&nbsp;..
    [&nbsp;<STRONG>-n</STRONG>&nbsp;<EM>modulenames-to-skip-file</EM>&nbsp;]&nbsp;.. 
    [&nbsp;<STRONG>-N</STRONG>&nbsp;<EM>modulenames-to-skip-comma-sep-list</EM>&nbsp;]&nbsp;..
    [&nbsp;<STRONG>-x</STRONG>&nbsp;<EM>not-exceptions-file</EM>&nbsp;]&nbsp;..   
    [&nbsp;<STRONG>-X</STRONG>&nbsp;<EM>not-exception-comma-sep-list</EM>&nbsp;]&nbsp;..&nbsp;&nbsp;&nbsp;&nbsp;
    <EM>destfile</EM>&nbsp;<EM>srcfiles</EM>..</P>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P>It is obvious that when obfuscating some perl file, the names of
symbols the from the modules it imports should not be mangled (or obfuscated
versions of all dependant modules needs to be shipped, which is not always
convenient). The only way of excluding the symbol names from being mangled
is to list them in <EM>file with list of exceptions</EM>. This utility is dedicated
to creation of such <EM>file with list of exceptions</EM>.</P>
<P>
<HR>
<H1><A NAME="options">OPTIONS</A></H1>
<P>The options after which there is a ellipsis (<EM>..</EM>) in the synopsis section
accept a set of strings and thus may be specified several times. The values 
passed to such options will 
be merged. The values for all those options are strings that do not contain
spaces and commas in them. If the value of such option contains only one
space or comma, 
it is treated as there were two occurencies of that option with values formed 
from strings before and after that space or comma character. I.e. the 
following commandline strings will equally alter the behaviour of this 
script for option named <STRONG>-X</STRONG>:</P>
<PRE>
    -X a -X b -X c -X d
    -X 'a b' -X c -X d
    -X 'a b c d'
    -X 'a,b' -X c -X d
    -X 'a,b,c,d'</PRE>
<DL>
<DT><STRONG><A NAME="item_%2Dp_perl%2Dpath"><STRONG>-p</STRONG> <EM>perl-path</EM></A></STRONG><BR>
<DD>
Specify the invokaction string for the backend. It does not need to specify
the full path of the perl program. This option is intended for passing any 
additional options mostly used for specifying the location of modules your
program requires. The passed string is prepended to the necessary options
used for functionality of this script. The default value of this option is
<EM>perl</EM> and is sufficient for most cases.
<P></P>
<DT><STRONG><A NAME="item_%2Dd_dir%2Dprefix%2Dto%2Dexclude"><STRONG>-d</STRONG> <EM>dir-prefix-to-exclude</EM></A></STRONG><BR>
<DD>
Specify the set of directory name prefixes modules from which will be the
modules whoose symbols will be added to <EM>file with list of exceptions</EM>.
If you need to generate a list of a exceptions for a file in the current
directory and you are unix-like OS, then it's very convenient to use the 
prefix <EM>/</EM> to get a list of all exceptions (you will get a list of 
symbols from the modules that are located not in the current directory - e.g
<EM>/usr/lib/perl5/5.6.1/Pod/Usage.pm</EM>).
<P></P>
<DT><STRONG><A NAME="item_%2Du_user%2Dexceptions%2Dfile"><STRONG>-u</STRONG> <EM>user-exceptions-file</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2DU_user%2Dexception%2Dcomma%2Dsep%2Dlist"><STRONG>-U</STRONG> <EM>user-exception-comma-sep-list</EM></A></STRONG><BR>
<DD>
The <STRONG>-u</STRONG> option specifies filenames from which a list of symbols (each line
of the file lists exactly one symbol name probably surrounded by spaces) 
that should be added to resultant set of exceptions is taken. 
E.g. the symbols
<EM>blah</EM>, <EM>foo</EM>, <EM>bar</EM> will be extracted from the file with 
the following content:
<PRE>
 blah
   foo
  bar</PRE>
<P>The <STRONG>-U</STRONG> option specifies the a list of symbols 
that should be added to resultant set of exceptions. 
E.g. all the following commandline fragments request to add symbols 
<EM>blah</EM>, <EM>foo</EM>, <EM>bar</EM>, <EM>baz</EM>:</P>
<PRE>
    -U blah -U foo -U bar -U  baz
    -U 'blah foo' -U 'bar,baz'
    -U 'blah foo bar baz'</PRE>
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dinclude%2Dsymbols%2Dfrom%2Dexporter"><STRONG>--include-symbols-from-exporter</STRONG></A></STRONG><BR>
<DD>
If this option is specified, symbols listed as defined by Exporter::Heavy
are not ignored. Previous versions of this utility included such symbols
as exceptions; this commandline switch is added as a mean to active old
behaviour.
<P></P>
<DT><STRONG><A NAME="item_%2Dm_module%2Dexceptions%2Dfile"><STRONG>-m</STRONG> <EM>module-exceptions-file</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2DM_module%2Dexceptions%2Dcomma%2Dsep%2Dlist"><STRONG>-M</STRONG> <EM>module-exceptions-comma-sep-list</EM></A></STRONG><BR>
<DD>
The <STRONG>-m</STRONG> option specifies filenames from which a list of module name prefixes
symbols from which should be added to resultant set of exceptions is taken.
The <STRONG>-M</STRONG> option specifies the module name prefixes but immediately on 
commandline.
<P>Module with name <EM>$name</EM> is considered <EM>source for exceptions</EM>
if <CODE>(split('::',$name))[0]</CODE> was exactly equal (i.e. charcter-by-character, 
case-sensitive - in other words using <CODE>eq</CODE> perl operator)
to the ones 
specifed directly via <STRONG>-M</STRONG> or mentioned in file specified using <STRONG>-m</STRONG> option.</P>
<P>For example, specifying <CODE>-M App</CODE> will make all symbols from modules
named <EM>App::Manager</EM>, <EM>App::Packer</EM> listed as exceptions, but not symbols
from modules <EM>AppConfig::MyFile</EM> and <EM>AppConfig::Std</EM>.</P>
<P></P>
<DT><STRONG><A NAME="item_%2Dn_modulenames%2Dto%2Dskip%2Dfile"><STRONG>-n</STRONG> <EM>modulenames-to-skip-file</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2DN_modulenames%2Dto%2Dskip%2Dcomma%2Dsep%2Dlist"><STRONG>-N</STRONG> <EM>modulenames-to-skip-comma-sep-list</EM></A></STRONG><BR>
<DD>
The <STRONG>-n</STRONG> option specifies filenames from which a list of module name prefixes
symbols from which should be excluded from resultant set of exceptions is taken.
The <STRONG>-N</STRONG> option specifies the module name prefixes treated this way 
but immediately on  commandline.
<P>Module with name <EM>$name</EM> is not considered <EM>source for exceptions</EM>
if <CODE>(split('::',$name))[0]</CODE> was exactly equal (i.e. charcter-by-character, 
case-sensitive - in other words using <CODE>eq</CODE> perl operator)
to the ones 
specifed directly via <STRONG>-N</STRONG> or mentioned in file specified using <STRONG>-n</STRONG> option.</P>
<P></P>
<DT><STRONG><A NAME="item_%2Dx_not%2Dexceptions%2Dfile"><STRONG>-x</STRONG> <EM>not-exceptions-file</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2DX_not%2Dexception%2Dcomma%2Dsep%2Dlist"><STRONG>-X</STRONG> <EM>not-exception-comma-sep-list</EM></A></STRONG><BR>
<DD>
The <STRONG>-x</STRONG> option specifies names of files from which a names of symbols to <STRONG>omit</STRONG>
from output exceptions list is taken.
The <STRONG>-X</STRONG> option specifies the names of symbols to <STRONG>omit</STRONG>
from output exceptions list immediately on commandline.
<P>Use these options if you are sure that the code being obfuscated won't ever use
symbols with these names from <STRONG>other</STRONG> modules (using these names for
private variables is perfectly OK, of course) - this helps your programs to 
become even more obfuscated, especially if you use modules that export a lot
of symbols (like e.g. <EM>Gtk::*</EM>).</P>
<P></P></DL>
<P>
<HR>
<H1><A NAME="notes">NOTES</A></H1>
<P>The files from which it extracts exceptions should be synaxically correct, and
all modules it <EM>require</EM>s or <EM>use</EM>s should be present. If the modules the
files from which it extracts exceptions are in non-standard locations,
you should specify these locations using <STRONG>-p</STRONG> switch - e.g. to extract 
exceptions from file, that uses modules located in directory <EM>lib</EM>, add
the following to your commandline: <CODE>-p&nbsp;'perl&nbsp;-Ilib'</CODE>.</P>
<P>It's impossible to create a list of exceptions by using only <STRONG>-d</STRONG> switch
for modules referenced using <CODE>require</CODE> operator. You will have to specify 
module name prefix to be able to extract symbols from such modules.</P>
<P>This script extracts just symbol names, without any type information - i.e.
if some module exports just two symbols - <EM>$foo</EM> and <EM>%foo</EM>, the resultant 
exceptions file will contain just one line with word <CODE>foo</CODE>. The strings passed
directly via <STRONG>-u</STRONG>, <STRONG>-x</STRONG> options and indirectly via files specified with
<STRONG>-u</STRONG>, <STRONG>-x</STRONG> should also be symbol names, without package name part and 
without type-specific prefix (<EM>$</EM>, <EM>%</EM>, etc) - e.g. <EM>bar</EM>, not 
<EM>$bar</EM> or <EM>$blah::bar</EM> (though the script will try to extract bare symbol 
name).</P>
<P>On unix-like OSes, in case all perl source files use modules from standard
locations (<EM>/usr/lib</EM>, <EM>/usr/local/lib</EM>, etc) it's very convenient to 
invoke the <EM>gen-ident-exceptions.pl</EM> script with the relative paths to the
perl source files, adding <STRONG>-d /</STRONG> to the commandline. This way you won't
have to type common module prefixes your source file uses. On Windows same
applies, but appending <STRONG>-d C:</STRONG> to the commandline instead (provided
the perl is installed on drive <EM>C:</EM>).</P>

