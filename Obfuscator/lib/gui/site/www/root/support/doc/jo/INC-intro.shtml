<!---BEFORE_DOC_CONTENT-->
			    
<h4>Table of contents</h4>
<ul>
<li><a href=#keyfacts>Key facts</a>
<li><a href=#exceptions>Key concept: exceptions - names of symbols that should not be modified</a>
<li><a href=#steps>Steps for obfuscating the project with JavaScript Obfuscator</a>
</ul>


<a name=keyfacts></a>
<h1>Key facts about JavaScript Obfuscator</h1><p>

<ul>
<li>It never overwrites input files.
<li>It has both GUI and command line interfaces. GUI uses command line interface under the hood, but GUI
    adds some handy tools, so GUI interface is more powerfull and feature-rich and is more recommended to use.
    <p>
    It's really greatly recommended to  use GUI interface to set up the project.
    Later you can export scripts (or .bat files for Windows) that allow you to build/rebuild/clean your project
    from command line  - they are called <a href=buildscript.shtml>buildscripts</a>.
    <p>
    And if you insist on never using GUI interface (it's very bad idea!) you can still generate command line
    using GUI on your computer (go to <span class=menuref>Tools &rArr; Command line builder</span>) 
    or online command line builder available 
    <a href=http://stunnix.com/support/interactive/cmd-builder/cl-jo.shtml>on our site</a>.
    
<li>Trial version can perform only one kind of transformation for symbol names - by prepending string
    <code>ReplacementFor_</code> to them. This does not limit your ability to evaluate  JavaScript Obfuscator in any way!


    The trial version does allow you to fully evaluate  JavaScript Obfuscator and prepare your project for obfuscation 
    using only trial edition.  
    <p>
    Just imagine that instead of <code>ReplacmentFor_someFunction</code> you'll get  <code>z78a4b2e</code>. 
    Those symbols that got prefix with trial version will become something unreadable when protected by non-trial.
    It's easier to prepare project for obfuscation using this kind of replacement (when some prefix is prepended), 
    so it's called a debug mode. Using debug mode is recommended when using non-trial version of the product too! - 
    as it allows to understand what's going on much easier (you'll get errors looking like
    <tt>"unknown symbol ReplacementFor_someFunction"</tt> 
    instead of <tt>"unknown symbol z72a63be9f"</tt> - the former is much more readable when debugging!).
    <p>
    Once you created a project, prepared it for protection using trial, you can purchase non-trial, just open that 
    project in non-trial edition, click <span class=menuref>Build &rArr; Rebuild all</span> 
    and you'll get your project fully protected.
    So you won't loose any time spent evaluating trial edition.

<li>Default settings and values of parameters are safe and reasonable.
<li>Obfuscation of the project is not as quick as zipping the folder with source code - you have to confiure
    your project (by listing names that should not be modified, called exceptions) 
    and even modify your code a little in case you use eval() in your code
    . So be ready  to spend from hours to days before you get protected version of your code that works correctly
    after obfuscation.
   
</ul>

<a name=exceptions></a>
<h1>Key concept: exceptions - names of symbols that should not be modified</h1><p>

The purpose of JavaScript Obfuscator is to replace symbols with meaningless names.
Apparently, not all symbols can be changed without introducing errors.
For example, names 
    
of core API  (e.g. <code>Math.Pi</code> or <code>Date</code>) or DOM API (e.g. <code>document</code>, <code>location</code>)
    

    

    


can not be changed. Names of such symbols
should be added to the list of <b>exceptions</b> - so obfuscator does not change them  
    
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.
<p>


<h2>Symbols defined in 3rd-party  libraries </h2><p>
If your code calls some functions from 3rd-party  libraries  

that your code loads from remote site using <code>&lt;script&gt;</code> attribute or you are not allowed to modify






, you have to list all symbols that you use from those  libraries  as exceptions

<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.

<p>
JavaScript Obfuscator ships with a lot of tools that help generating exceptions for 3rd-party  libraries 

<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>    
.

But it's greatly recommended to add all 3rd-party libraries to your project and obfuscate them together with your code.
This way you won't have to bother generating exceptions for them. Even if they are already minified - it's not a problem!


<h2>Exporting symbols to 3rd parties</h2><p>

If your code is in fact a   library  that you sell or distribute, then you have to list as exceptions  
all symbols defining its API
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.

Use tools shipped with JavaScript Obfuscator to generate exceptions for API of your  library 

<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>    



<h2>Handling symbols defined by HTML markup</h2><p>

If your client-side code uses old-style way of accessing nodes by their IDs via <code>document.all</code>
 (e.g. <code>document.all.callToAction</code>) or form  elements by their names using <code>document.forms[]</code> array  
(e.g. <code>document.forms[1].radio_name</code>), then names or IDs of those elements and form fields have to 
be listed as exceptions too.
JavaScript Obfuscator includes tools to generate exceptions for these cases too
    
<a class=docref href=exceptions.shtml#exceptions-from-html>generating exceptions for element names and IDs</a>    



<h2>Dealing with names of symbols in strings</h2><p>
<a name=use_objname></a>




Sometimes, your code refers to names of functions or variables inside the strings, e.g. in strings passed to


<code>eval()</code> or <code>setTimeout()</code> functions.
 

 



 What to do in such case:
<dl>
<dt>If the name of the symbol inside the string is computed at runtime</dt>


    <dd>(e.g. entered by the user , or read from some attribute of some DOM node), then the only
	option you have is to list all possible names of symbols that can be used this way in your code
	in the list of exceptions   
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.
	<p>







    </dd>
<dt><a name=objname></a>If the name of the symbol is a constant string</dt>
    <dd>you have these options:
	<ul>
	<li>put that symbol to the list of exceptions to prevent it from being modified 
		 
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>    
.

	<li>List that symbol as "quoted symbol name". In this case JavaScript Obfuscator will replace every string
	    whose value is equal to the symbol name, with a string equal to  mangled symbol name.
	    Strings that include some other characters around symbol name won't be changed.
	    Register "quoted symbol name" in <span class=menuref>Symbols &rArr; 
	    Edit strings that contains symbol names</span> if using GUI, or put them, one symbol per line,
	    to a text file and pass its name after <code>--quoted-symbol-names</code> command line option
	    if using command line interface.


	<li>wrap that name in the call to <code>OBJNAME</code> function
 
(enclosing the name of the symbol in <b>single</b> quotes; double quotes will not work; no spaces between parentheses and quoted symbol name are allowed)

<pre>//before
    var varname = "myvar";
    eval(varname + '= 23;");
//after
    var varname = <b>OBJNAME('myvar')</b>;
    eval(varname + ' = 23;');
</pre><p></p>




For this to work, add the following lines to the begining of your files (or make sure that these definitions 
are visible to each of your files):
<pre>
function OBJNAME(n) { '';return n; }
</pre><p></p>
	</ul>
    </dd>
</dl>
GUI has special tool to help with this  - it lists all symbols found inside strings, in <span 
class=menuref>Symbols &rArr; View strings encountered in code</span>. Most probably you should copy list
of such symbols 
to <span class=menuref>Symbols &rArr; Edit strings that contains symbol names</span>, or to the 
list of exceptions (<span class=menuref>Symbols &rArr; Edit user-specified exceptions</span>), or 
alter your code by wrapping string constants with those symbols in  call to <code>OBJNAME()</code>.




















<a name=steps></a>
<h1>Steps for obfuscating the project with JavaScript Obfuscator</h1><p>


<a name=step1></a>
<h2 class=step>Step  1:  add <code>OBJNAME</code> to your code</h2><p>



Alter all places where your code refers to names of symbols inside string constants, by wrapping
names of symbols into a call of <code>OBJNAME</code>  function,
as explained <a href=#use_objname>above</a>.

<p>
Then test that after these changes your unobfuscated code works same as your original code.





<a name=step2></a>
<h2 class=step>Step  2: collect set of exceptions for your code</h2><p>

A lot of tools for this are shipped with JavaScript Obfuscator
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>    
 





<a name=step3></a>
<h2 class=step>Step  3: process your code using lite protection and test it</h2><p>


With lite protection, names of symbols that are to be made unreadable, will just get <code>ReplacementFor_</code> prefix.
This will result in error messages looking like <tt>"Undefined function ReplacementFor_SomeFunctionName"</tt>
when you'll  run your code - it will clearly indicate that
symbol <code>SomeFunctionName</code> should be added to the list of exceptions
(see more on what exceptions are <a href=#exceptions>here</a>).

<p>
Proceed to next step only if your protected code works fine.




<a name=step4></a>
<h2 class=step>Step  4: process your code using non-lite protection and test it</h2><p>

After switching protection mode to non-lite, your code should work exactly as when protected by lite protection.
Note that <b>trial</b> version of JavaScript Obfuscator can perform only one kind of transformation for symbol names - 
by prepending prefix  <code>ReplacementFor_</code> to them. This does not limit your ability to evaluate  JavaScript Obfuscator in any way
as mangling integers and strings in non-lite mode is the same for both trial and non-trial, so once you tested your code
protected with trial in non-lite mode, you will need only minimal testing of code once upgrading trial into non-trial of
 JavaScript Obfuscator.







<style type=text/css>
a.docref:before { content: "[see \""; }
a.docref:after { content: "\"]"; }
a.docref { font-size: 70%; }

h2 { font-size: 120%; padding-top: 1em; padding-left: 2em; }
dl { padding-top: 0em; } 

.menuref { font-style: italic; } /* references to menu items */

span.wrap_condition { border: solid 1px black; }
span.wrap_condition_0 { background: #ffe; }
span.wrap_condition_1 { background: #fef; }
span.wrap_condition_2 { background: #eff; }
span.wrap_condition_3 { background: #eef; }
</style>

<!---AFTER_DOC_CONTENT-->
