
<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<LI><A HREF="#building tree with unpacked versions of site, server and perl">BUILDING TREE WITH UNPACKED VERSIONS OF SITE, SERVER AND PERL</A></LI>
	<LI><A HREF="#options">OPTIONS</A></LI>
	<LI><A HREF="#examples">EXAMPLES</A></LI>
</UL>
<!-- INDEX END -->

<HR>
<P>
<HR>
<H1><A NAME="name">NAME</A></H1>
<P>packsite-par.pl - a script to pack a dynamic Perl-driven web site and 
Stunnix Perl Web Server into a single executable image.</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<P><STRONG>packsite-par.pl</STRONG>  &nbsp;<STRONG>-D</STRONG>&nbsp;<EM>directory-to-append</EM>&nbsp;..&nbsp;
    &nbsp;<STRONG>-o</STRONG>&nbsp;<EM>output-base-name</EM>&nbsp; [&nbsp;<STRONG>-z|--need-zip</STRONG>&nbsp;]
    [&nbsp;<STRONG>-r</STRONG>&nbsp;<EM>path-to-main-script</EM>&nbsp;] 
    [&nbsp;<STRONG>-M</STRONG>&nbsp;<EM>list-of-required-modules</EM>&nbsp;]..</P>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P>This is a script to automate building standalone executables containing
Stunnix Perl Web Server and the perl-driven dynamic web site, along with
utility to start web server automatically on the machine where executable
is run and open browser window to show the default page of the site. The
backend for building executables used is PAR - <A HREF="http://par.per.org">http://par.per.org</A>.</P>
<P>It also can be used for building minimal sets of Perl modules required by
Stunnix Perl Web Server and web site, in order to use these modules and
perl interpreter iteself as standalone runtime for running web server and
site even if no installation of Perl interpreter is present in the system.</P>
<P>The executable is built in 2 stages - at first temporary ZIP archive is 
created that
contains only core modules (i.e. the modules that are present in the
installation of perl) used by Stunnix Perl Web Server and dynamic web site.
The output of the first stage can be kept in ZIP file if commandline
option <STRONG>-z</STRONG> is passed on commandline. On the second stage, that is actually 
optional, all required resources - namely the web server implementation and 
entire web site (the names of the directories containing all resources
are specified via <STRONG>-D</STRONG> commandline option) - are appended
to that ZIP file; after that the ZIP file and perl interpreter are effectively 
appended to  general-purpose executable loader that unpacks ZIP file at
runtime and starts the appended perl interpreter for running the file
specified by <STRONG>-r</STRONG> option. The base name for the ZIP archive and executable
file (i.e. names of files with extension trimmed) is specified with <STRONG>-o</STRONG>
commandline option. If dynamic site requires non-standard Perl modules,
their names, one per line, should be listed in files; names of these
files with lists of modules should be specified via <STRONG>-M</STRONG> option.</P>
<P>The executable files produced this way will unpack the appended ZIP file
and perl interpreter to the special <STRONG>cache directory</STRONG> (typically located in
<EM>/tmp/par-$USER/</EM> on unix or in
<EM>c:/documents-and-settings/$USER/local settings/par-$USER</EM> on WindowsNT-based
OSes or in <EM>c:/windows/temp/par-$USER</EM> on Win9x-based OSes), and run perl
interpreter from that directory for execution of the script specified via
<STRONG>-r</STRONG> option. On the termination of the script, the <STRONG>cache directory</STRONG> won't
be deleted, to speedup starting on the next invokation. Due to this caching
it may be inconvenient to pack huge sites into executables since it will
take a lot of time to unpack them first time executable is run, and a lot
of disk space on the user's box will be taken by extracted version of the 
site.</P>
<P>For these reasons, shipping dynamic site and perl interpreter with all 
modules required for running web server and site in the unpacked form 
may be more convenient.
Such way of packing also reduces total size of the data to ship in case
browser-based application is meant to be cross-platform and runable on
several platforms from the same media (e.g. CDROM). The next section covers
this topic.</P>
<P>
<HR>
<H1><A NAME="building tree with unpacked versions of site, server and perl">BUILDING TREE WITH UNPACKED VERSIONS OF SITE, SERVER AND PERL</A></H1>
<P>Please read last paragraphs of previous section on why it may be mode
preferable to ship everything in uncompressed form.</P>
<P>To ship site, web server and perl interpreter with all modules in uncompressed 
form, one has to gather all modules and files used by them that are required
to run Stunnix Perl Web Server and web site.</P>
<P>One way of doing this is to use this utility and to specify filenames with 
list of modules required by the site using <STRONG>-M</STRONG> option as usual and
add the <STRONG>-z</STRONG> option. As a result, a .ZIP file will be produced that will
contain all modules specified and all files they require (namely dynamically
loadable libraries with native code). One has to unpack the resulting ZIP
file to some directory and copy perl interpreter (typically <EM>/usr/bin/perl</EM>
or `which perl` on Unix or <EM>c:\perl\bin\perl.exe</EM> and <EM>c:\perl\bin\perlNN.dll</EM> 
on Windows, where NN is 2 digits of perl version number - e.g. ``56'') to
the parent directory of it. This is basically all that needs to be done.
If the site is for some sort of CDROM, one also will need to write
<EM>autorun.inf</EM> and <EM>autorun</EM> files for automatic execution of the 
browser-based application on insertion of the CDROM. Please see <EM>autorun.inf</EM>
and <EM>autorun</EM> in the same CDROM tree availalable on the 
<A HREF="http://www.stunnix.com/prod/ws/samplecd.shtml">http://www.stunnix.com/prod/ws/samplecd.shtml</A>.</P>
<P>
<HR>
<H1><A NAME="options">OPTIONS</A></H1>
<P>The options after which there is a ellipsis (<EM>..</EM>) in the synopsis section
accept a set of strings and thus may be specified several times. The values 
passed to such options will 
be merged. The values for all those options are strings that do not contain
spaces and commas in them. If the value of such option contains only one
space or comma, 
it is treated as there were two occurencies of that option with values formed 
from strings before and after that space or comma character. I.e. the 
following commandline strings will equally alter the behaviour of this 
script for option named <STRONG>-X</STRONG>:</P>
<PRE>
    -X a -X b -X c -X d
    -X 'a b' -X c -X d
    -X 'a b c d'
    -X 'a,b' -X c -X d
    -X 'a,b,c,d'</PRE>
<DL>
<DT><STRONG><A NAME="item_%2DD_directory%2Dto%2Dappend"><STRONG>-D</STRONG> <EM>directory-to-append</EM></A></STRONG><BR>
<DD>
Specifies the directory with resources (i.e. Stunnix Perl Web Server or
site itself) to be appended. Multiple <STRONG>-D</STRONG> options may be specified - in
which trees will be merged in the resultant archive.
<P></P>
<DT><STRONG><A NAME="item_%2Do_output%2Dbase%2Dname"><STRONG>-o</STRONG> <EM>output-base-name</EM></A></STRONG><BR>
<DD>
Basename for the output file. For ZIP archives, extension .zip will be
appended automatically. For executables - default executable suffix will
be appended automatically for the target OS. The default value for this
option is <EM>program</EM>.
<P></P>
<DT><STRONG><A NAME="item_%2Dz%7C%2D%2Dneed%2Dzip"><STRONG>-z|--need-zip</STRONG></A></STRONG><BR>
<DD>
If this option is passed, the intermediate ZIP file is preserved, and no
executable is generated. This can be used for building sets of modules
and their support files required for running Stunnix Perl Web Server and
the site itself.
<P></P>
<DT><STRONG><A NAME="item_%2DM_list%2Dof%2Drequired%2Dmodules_%5D%2E%2E"><STRONG>-M</STRONG> <EM>list-of-required-modules</EM> ]..</A></STRONG><BR>
<DD>
This option specifies names of files containing lists of modules used
by your site. It requests the listed modules and their support files
(like dynamilc libraries with native code and all required perl modules)
to be added to the archive. The file with list of the modules should 
contain one module name perl line (everything after # is considered
a comment). Such lists can be composed by using <EM>get-mods-list.pl</EM> utility
shipped with Stunnix Perl-Obfus, or by transforming output of 
<EM>scandeps.pl</EM> utility (shipped with Module::ScanDeps module
that is a requirement of PAR).
<P></P>
<DT><STRONG><A NAME="item_%2Dr_path%2Dto%2Dmain%2Dscript"><STRONG>-r</STRONG> <EM>path-to-main-script</EM></A></STRONG><BR>
<DD>
This option specifies relative path to the script that should be executed
when executable is invoked. Most typically the name of the script will
be <EM>startsite.pl</EM>; the path to the script is specified as a path to the
script inside any of the directories specified by the <STRONG>-D</STRONG> option.
The default value is <EM>script/startsite.pl</EM>.
<P></P></DL>
<P>
<HR>
<H1><A NAME="examples">EXAMPLES</A></H1>
<P>The following commandline</P>
<PRE>
    perl packsite-par.pl -o site -D image -r 1/script/startsite.pl -M modlist-obfui.txt</PRE>
<P>will pack Stunnix Perl Web Server and the site to the file with name <EM>site</EM> 
and extension specific to the OS; the contents of the directory <EM>image</EM>
will be added to the archive; the script <EM>1/script/startsite.pl</EM> will
be executed when executable is run (so that file named
<EM>image/1/script/startsite.pl</EM> should be present in the current directory);
names of modules required by the site will be taken from file 
<EM>modlist-obfui.txt</EM>; it has the following content for Project Manager for
Stunnix JavaScript Obfuscator:</P>
<PRE>
 Data::Dumper
 Exporter
 File::Spec
 File::Spec::Unix</PRE>
<P>if <STRONG>-z</STRONG> switch is added to the commandline, file with name <EM>site.zip</EM> will
be created in the current directory; it will contain all modules and their
support files required for running  Stunnix Perl Web Server and Project 
Manager.</P>

