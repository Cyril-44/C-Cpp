<!--#set var="title" value="GUIDE: Protecting projects with Stunnix VBScript Obfuscator (without using Project Manager)" -->
<!--#include virtual="/h-vbso.shtml" -->
<div class=curloc><span class=curloc><a 
    href=../../ class= nav>Support</a> &#8594;
<a href=../ class= nav>Documentation</a> &#8594;
<a href=. class= nav>VBScript Obfuscator suite</a> &#8594;
<a href=. class= nav>Users guide</a>
</span></div>

<div class=body>

<ol>
<li><a href=#cmdbuilder>Make sure you know about online commandline builder
    for VBS-Obfus</a>
<li><a href=#makefile>Prepare makefile</a>
<li><a href=#fixeval>Update use of symbol names in the modules</a>
<li><a href=#testorig>Test your original code with all modifications necessary
    for protection applied</a>
<li><a href=#collect>Collect names of symbols that should not be modified.</a>
<li><a href=#testbuild>Test protection with "lite" protection applied</a>
</ol>


<h1>Steps in detail</h1>
<h2>Make sure you know about online commandline builder
    for VBS-Obfus</h2>
<a name=cmdbuilder></a>
Make sure you are aware of Stunnix interactive online 
 <a href=/support/interactive/cmd-builder/cl-vbs.shtml>
 commandline builder</a>. It not only helps to build command lines, but
 can be used as a Table Of Content for the VBS-Obfus manual.
    
 <h2>Prepare makefile</h2>
 <a name=makefile></a>
 Prepare a Makefile for a Make utility or compose a script that will perform
 protection for your entire project; make sure that it allows to edit
 commandline options applied to all invokations of VBS-Obfus in a single
 place. It will be very useful since you will have to run VBS-Obfus
 on your entire project several times, with different settings.
 
 <h2>Update use of symbol names in the modules</h2>
 <a name=fixeval></a>
 Find all places in your code that uses symbol names to make a reference.
 Add the following lines to the begining of those files (or make sure
 that the definitions of these functions are visible to your code from
 some base module):
<pre>
function OBJNAME(n): n=n&"":OBJNAME=n:end function:
</pre>	  
 
If the name of the symbol is a string constant, wrap it into the call of
OBJNAME function (passing the name of the symbol in double quotes, without
any spaces between parenthesis and quoted symbol name:

<pre>
//before
    Dim varname: varname = "myvar";
    ExecuteGlobal(varname &amp; "= 23;");
//after
    Dim varname: varname = OBJNAME("myvar");
    ExecuteGlobal(varname &amp; " = 23;");
</pre>
<p>
If your code uses some string that comes from external source as a name
of the symbol, list all possible names of symbols as exceptions.
E.g. the example below you will have to list 'f1' and 'f2' as exceptions
in the 'exceptions.txt' file, otherwise your code won't work once protected
since there won't be functions with names 'f1' and 'f2' (there would
be functions with names something like z343a1b034 and z5e915db6).
<pre>
function f1()
    f1 = 1
end function
function f2 
    f2 = 2
end function

fnnm = document.forms["form1"].myentry;
ExecuteGlobal(fnnm &amp; "()");
</pre>

 

<h2>Test your original code with all modifications necessary
    for protection applied</h2>
<a name=testorig></a>
Make sure your original code, after making all modifications described in
the steps above, works as the code before your modifications.


<h2>Collect names of symbols that should not be modified.</h2>
<a name=collect></a>
There can be several reasons a symbol should not be replaced with a meaningless
string - most frequently case is when the symbol is in external module
that is shipped in non-protected form (e.g. some library you don't have 
permission to modify or functions defined in ActiveX control) or is 
a name of document element (used by your code in statement like 
'document.all.para1' or formfield name used by your code like this:
document.forms[1].radio_name) or used in CSS files inside <b>expression</b>
statement, or just simply should stay the same because your project
is library and the symbols are public entries into it.
Another case is when some symbols are used from the parts of your application,
that are not obfuscated - e.g. from html strings with embedded vbscript 
code that you don't plan to alter by marking names of symbols in it 
with OBJNAME() call.
<p>
There are several options available on how to do this:
<ol>

<li>
    You can put all 3rd-party libraries you use in your code to a separate directory,
    start Project Manager GUI,
    go to <i>Tools, Extract symbols from     directory with source files</i>,
    enter name of that directory, select symbol types you wish to gather,
    and get the list of symbols defined in that directory.
    Then paste it to the list of exceptions.



<li>
    For generating list of IDs and NAMEs of html elements and form fields,
    you can use <a href=get-idents-from-html.shtml>get-idents-from-html.pl</a> utility shipped with VBS-Obfus,
    by running it over all your html files, like this
    <pre>
	perl get-idents-from-html.pl -i htmlidents.txt file1.html file2.html file3.html
    </pre>
    Note: if using Project Manager GUI,  IDs and NAMEs of html elements and form fields
    are collected automatically if you assign a proper "mode" to the files that can
    contain them in the <i>For files - assign modes to project's files,
    add/remove files.. </i> menu item.



<li>For symbols that are defined in public interface of ActiveX or OLE
    component, it's possible to extract names of these symbols using
    Project Manager. Start Project Manager, go to the Tools menu
    and select 'Extract symbols from ActiveX components' (this menuitem
    is available only on Windows platforms). For each component your
    project uses, select the component, click 'Extract' button, and you 
    will be prompted to
    save a list of exceptions extracted from the component to the file
    of your choice. Please note that Evaluation and Demo editions don't
    offer this functionality (empty file will be produced).

<li>For generating list of symbols from external VBScript libraries, one
can use semi-manual method - extract all symbols used by your code
by running VBS-Obfus over all files of your project with commandline
option 
<a href=vbs-obfus.shtml#item_%2DD_list%2Dof%2Dsymbols%2Dfilename">-D somefile.txt</a>), 
and then find all symbols in 'somefile.txt' that come from external libraries.
<p>
If all symbols start from the same prefix or match some pattern, such filtering
can be performed very easily


<li>Produce list of exceptions manually. Sometimes this is necessary even
    for symbols from external library modules too. Just add them to the
    file (e.g. named 'symlist.txt') one per line.
</ol>


<h2>Test protection with "lite" protection applied</h2>
<a name=testbuild></a>
Apply "lite" protection to your application, and test as much of your
app as possible (i.e. try to perform all operations, or at least
most common). 
The 99% of the problems encountered when trying to run protected app is
that some symbol from external module was not listed as exception, and got
replaced with different name.  Once run, you will get errors like
"Object is required: z34ea8c" in places where original code calls
"document.all.myentry.value" and "myentry" is not listed as exception. 
In order to easily
identify that "z34ea8c" should stand for "myentry", one should
to use "lite" protection, that will make symbols only slightly less
understandable, but different from original, e.g. you will get errors like 
"Object is required: Z439Z_myentry", that will signal you that
"myentry" is not listed as exception. The following commandline will
stand for "lite" protection:
<p>

<pre>perl vbs-obfus -jam 0 -i prefix -n none  -e 0</pre><p>
 that will stand for
"Jam spaces and newlines: off", 
"Number of encoding iterations applied: 0 - don't encode",
"Obfuscation of symbol names: none",
 "Obfuscation of integer constants: none"
 options in interactive online 
 <a href=/support/interactive/cmd-builder/cl-vbs.shtml>
 commandline builder</a>.
 
 
 <p>
 Once your app works correctly once such "lite" protection is applied,
 you should apply "final" protection, using options you wish. If such
 "finally-protected app" works differently, revert commandline options
  back to  "lite" protection, and turn on each type of protection 
  incrementally, e.g. turn on "Obfuscation of integer constants", then
  "Obfuscation of string constants", then 
  "Number of encoding iterations applied: 4" and testing your app one each
  step.
<p>
If something still doesn't work, make sure you've read recommendations in
<a href=vbs-obfus.shtml#notes>NOTES section in VBS-Obfus manual</a>.     
<!--#include virtual="/f.shtml" -->

