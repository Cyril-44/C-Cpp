<!---BEFORE_DOC_CONTENT-->
			    
<h4>Table of contents</h4>
<ul>
<li><a href=#extract-exceptions>Extacting list of symbols</a>
<li><a href=#adding-to-exceptions>Adding symbols to exceptions</a>
<li><a href=#exceptions-from-html>Extracting exceptions from HTML</a>
</ul>



<a name=extract-exceptions></a>
<h1>Extacting list of symbols</h1><p>

There are several ways to extract a list of exceptions. If not specified otherwise, you should paste extracted exceptions as explained 
<a href=#adding-to-exceptions>here</a>. 

Also see <a href=#exceptions-from-html>extracting exceptions from HTML</a> if your project is web-oriented.




 <div class="doc-tabs">
  <ul>
    <li><a href="#tabs1-1">When using GUI</a></li>
    <li><a href="#tabs1-2">When using command line</a></li>
  </ul>




  <div id="tabs1-1" >

    <p>

<ol>



<li><p>
 You can put  source code 
of all  third-party libraries
you use into into separate directory, start 
Project Manager GUI, go to <span class=menuref>Tools &rArr; Extract symbols from directory with source files</span>, 
enter the name of that directory, select symbol types you wish to gather, and get the list of 
symbols defined in that directory. 



<li>For symbols that are defined in public interface of ActiveX or OLE component, it's possible 
to extract names of these symbols using Project Manager - go to the <span class=menuref>Tools   &rArr;
Extract symbols from ActiveX components</span>.
For each component your project uses, select the component, click the 
 <span class=menuref>Extract</span> button, and you will be prompted to save a list of exceptions extracted from the 
component to the file of your choice. 
<p>
Please note that trial version doesn't have this function.


<li>You can create a new project containing  only  libraries  that you need to extact symbols from,
and without touching any settings, do <span class=menuref>Build  &rArr;  Rebuild all</span>, and then go to
<span class=menuref>Symbols  &rArr; View resultant symbol mapping</span>, scroll to bottom and
click on <span class=menuref>Download list of encountered symbols in code from input files</span> - this
way you will get names of all symbols found in those   libraries . 
<p>
You will have to review it and remove names of local variables, names of private symbols,
names of arguments passed to functions
and then use remaining symbols as exceptions. If all  symbols exported by that  library  have same prefix,
then you just select all symbols with that prefix as exceptions.


<li>Produce a list of exceptions manually. Sometimes this is necessary even for symbols from 
external   library   too.

</ol>

  </div>















  <div id="tabs1-2" >

    <p>
<ol>
<li>The easiest way to extract symbols is to use GUI. There is even no need to create any project.
See first item on <i>When using GUI</i> tab.

<p>
There is a way to do the same from command line using <a href=extract-syms-from-dir.shtml>extract-syms-from-dir.pl</a>
utility, but it has less options.



<li><p>GUI also allows to extract symbols that are defined in public interface of ActiveX or OLE components,
    without creating any project.  See second item on <i>When using GUI</i> tab for how to do this.



<li>You can create a new project containing  only  libraries  that you need to extact symbols from,
and then process it <code>vbs-obfus</code> , appending 
<a href="vbs-obfus.shtml#item_%2DD_list%2Dof%2Dsymbols%2Dfilename">-D mapping.txt</a> to its command line, 
and then use first column from <tt>mapping.txt</tt> as a list of all encountered symbols.
This way you will get names of all symbols found in those   libraries . 
<p>You will have to review it and remove names of local variables, names of private symbols,
names of arguments passed to functions
and then use remaining symbols as exceptions. If all  symbols exported by that  library  have same prefix,
then you just take all symbols with that prefix and use them as exceptions.





<li>Produce a list of exceptions manually. Sometimes this is necessary even for symbols from 
external  library    too. Simply add them to the file (e.g. <tt>exceptions/manual.txt</tt>) one per line.


</ol>

  </div>


</div>






<a name=adding-to-exceptions></a>
<h1>Adding symbols to exceptions</h1><p>

 <div class="doc-tabs">
  <ul>
    <li><a href="#tabs2-1">When using GUI</a></li>
    <li><a href="#tabs2-2">When using command line</a></li>
  </ul>




  <div id="tabs2-1" >

    <p>

To add symbols to exceptions, simply go to <span class=menuref>Symbols &rArr; User-Specified exceptions</span>
and paste the symbol names there, one per line.
<p>
You can use empty lines to separate blocks of exceptions.
<p>
You can use <code>#</code> to enter comments or comment out some symbols.
<p>
You can edit that list with your favourite text editor, as it's stored in plain text file
<tt>list-of-symbols-for-obfuscator/user-exceptions.txt</tt> in your Project Input Directory.
<p>
You can also store the symbols in separate files. Just place those files (e.g. <tt>manual.txt</tt>,
<tt>library1.txt</tt>, <tt>library2.txt</tt>) into some directory (e.g. named <tt>exceptions</tt>). 
To tell VBScript Obfuscator to read it, go to <span class=menuref>Settings &rArr; Edit modes &rArr;
standard: treat as raw code</span>, scroll to section <span class=menuref>File-related options</span>,
find entry with label
"<span class=menuref>space-separated names of files to get list of exceptions from</span>",
put a checkbox to the left of it, and  put <tt>exceptions</tt> into the entry, then click 
<span class=menuref>Save</span> at the bottom of the page.


  </div>





  <div id="tabs2-2" >

    <p>

To add symbols to exceptions, simply put them to plain text file, one per line, and pass name of that file
after <tt>-x</tt> switch.
<p>
You can use empty lines to separate blocks of exceptions.
<p>
You can use <code>#</code> to enter comments or comment out some symbols.
<p>
You can also store the symbols in separate files. Just place those files (e.g. <tt>manual.txt</tt>,
<tt>library1.txt</tt>, <tt>library2.txt</tt>) into some directory (e.g. named <tt>exceptions</tt>) and pass
its name after <tt>-x</tt> swtich - <tt>vbs-obfus</tt> will read all files from that directory. 



  </div>


</div>





<a name=exceptions-from-html></a>
<h1>Extracting exceptions from HTML</h1><p>

 <div class="doc-tabs">
  <ul>
    <li><a href="#tabs3-1">When using GUI</a></li>
    <li><a href="#tabs3-2">When using command line</a></li>
  </ul>




  <div id="tabs3-1" >

    <p>

Project Manager GUI can automatically extract IDs and NAMEs of html elements and form fields,
and add them to the list of exceptions. This is done for files that are assigned processing mode
containing <tt>"special: copy file as is, .. use ids and names of .. elements in it as exceptions"</tt>
in its name. To change processing mode for a file, go to <span class=menuref>Settings  &rArr; For files </span>,
put checkboxes near those files, select mode from drop-down list, click on 
<span class=menuref>Assing processing mode</span>
<p>
You can review symbols autoextracted this way in <span class=menuref>Symbols   &rArr; 
View list of autoextracted exceptions</span>.

  </div>








  <div id="tabs3-2" >

    <p>
 For generating a list of IDs and NAMEs of html elements and form fields, you can use 
<a href=get-idents-from-html.shtml>get-idents-from-html.pl</a> utility shipped with VBScript Obfuscator, 
by running it over all your html files, like this: 
<pre>get-idents-from-html.pl -i exceptions/htmlidents.txt file1.html file2.html file3.html </pre><p></p>

  </div>


</div>













<script>
<!--
on_page_loaded[on_page_loaded.length] = function() {  $( ".doc-tabs" ).tabs(); };
-->
</script>









<style type=text/css>
a.docref:before { content: "[see \""; }
a.docref:after { content: "\"]"; }
a.docref { font-size: 70%; }

h2 { font-size: 120%; padding-top: 1em; padding-left: 2em; }
dl { padding-top: 0em; } 

.menuref { font-style: italic; } /* references to menu items */

span.wrap_condition { border: solid 1px black; }
span.wrap_condition_0 { background: #ffe; }
span.wrap_condition_1 { background: #fef; }
span.wrap_condition_2 { background: #eff; }
span.wrap_condition_3 { background: #eef; }
</style>

<!---AFTER_DOC_CONTENT-->
