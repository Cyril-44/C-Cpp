<!---BEFORE_DOC_CONTENT-->
			    
<div class=doc-guide>

<ol>

<h1>Step-by-Step Guide using GUI (Project Manager)</h1><p>
<li>Please read <a href=intro.shtml>JavaScript Obfuscator: Introduction and Key Concepts</a>.


<li>Start Project Manager

<li>Click <span class=menuref>Project &rArr; New</span> to create new project.

<ol>
<li>Enter the project input directory - a root directory where all files and subdirectories of 
    the project already reside. It's better to have all files of your project reside there, instead
    of adding them later after project's creation. No files in that directory will be modified by the tool.

<li>Enter path to output directory. It's where protected version of the file will be stored.
    All files in your project's Input Directory that have unknown type of JavaScript Obfuscator
    will be copied unmodified. It's recommended to use relative path (relative to project's Input Directory),
    e.g. <tt>../outdir</tt>.

<li>For State Directory name, enter path to a directory where JavaScript Obfuscator will store its state.
    The directory should exist. It's also recommended to use relative path (relative to project's Input Directory),
    e.g. <tt>../statedir</tt>.
    <li>Specify project files type. This will tell JavaScript Obfuscator which scripts to process - client-side or
    server-side
</ol>

<li><span class=rarelyused>Rarely needed!</span>
    Go to <span class=menuref>Project &rArr; Files</span> to ensure the file types are detected correctly
    for all file types. For each file extension present in the project, it's enough to check only one file
    with that extension - the type of file will be in the right column.

<li>Add as many libraries that your code uses into project's input directory 
     
(e.g. JQuery, Underscore), and 
    go to <span class=menuref>Settings &rArr; For files</span>, and put checkbox near those files/folders,
    click <tt>Add to project</tt>  button to add them to the project. This will reduce the number of libraries
    that you will be generating exceptions for in the next steps. 

    
Do not worry if those libraries are already  minified!



<li>Generate names of symbols that you are using from a libraries that you are not obfuscating along your project
    
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>
, review and manually update that list,
     and then add it to  <span  class=menuref>Symbols &rArr; 
    Edit user-specified exceptions</span>.

<li>Generate names of symbols that you export to other developers
    
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>
, and 
    and then add them  to <span  class=menuref>Symbols &rArr; 
    Edit user-specified exceptions</span>,
    so that they are not modified by JavaScript Obfuscator.



<li>Go to <span class=menuref>Symbols &rArr; View strings encountered in code</span> to review
    symbols whose names you have used in your code. Review that list.
    Then either copy that entire list and add it to 
    <span class=menuref>Symbols &rArr; Edit user-specified exceptions</span>,
      or alter your string constants and wrap those symbols in OBJNAME() as explained 
    <a href=intro.shtml#objname>here</a>.
    The later is preferred as it will result in fewer symbols being in the list of exceptions,
     meaning that your code will look more cryptic.





<li>Go to <span class=menuref>Build &rArr; Clear output &amp; state files &amp; rebuild all</span>. 
    Your project will be built with lite level of protection. 
    All symbols   that are subject to mangling will get <code>ReplacementFor_</code> prefix prepended to them.


<li>Now try to run your protected code from the output directory, testing all paths of control if possible.
    If you get interpreter errors like "<tt><code>ReplacementFor_FunctionName</code> can not be found</tt>",  most probably it means 
    that <code>FunctionName</code>  is a symbol from 3rd-party library.
    Either try to add that library to your project (so its code also gets obfuscated), or 
    add its symbols to the list of exceptions 
    by extracting its symbols  
<a class=docref href=exceptions.shtml#extract-exceptions>extacting list of symbols</a>
 
<a class=docref href=exceptions.shtml#adding-to-exceptions>adding symbols to exceptions</a>
.
    If you have already done extracting symbols from that library, it probably means that extraction did not find 
    some symbols, so you have to add them manually.    


<li>Repeat 3 last steps (starting from Go to <span class=menuref>Build &rArr; Clear output &amp; 
    state files &amp; rebuild all</span>) until you get no errors while running your protected code.





<li>Go to <span class=menuref>Settings &rArr; Select preset for code mangling..</span>
     and select a production profile you wish 
    to apply to your project and click Save. 
    Go to <span class=menuref>Build &rArr; Clear output & state files</span>, then do 
    <span class=menuref>Build &rArr; Rebuild all</span>.
    Then do very minor check that protected code works fine.
    
<li>Your product will then be ready for shipping.
</ol>

<h2>Useful tips</h2><p>
<ul>

<li>If you frequently add files with code that needs to be obfuscated to your project, then instead of
    adding them every time using <span class=menuref>Settings &rArr; For files</span>, you can set up how 
    JavaScript Obfuscator     should handle unregistered files of a given file extension, by going to
     <span class=menuref>Settings &rArr; Edit handling of unlisted files..</span>.
    <p>
    On that page, you will be asked for processing mode that should be assigned to files with a given file extension.
    If unsure which mode to specify, go to <span class=menuref>Settings &rArr; For files</span>
    and see which mode is used for files with that file extension, and use that mode for unregistered
    files with that extension.

<li>If you wish to make a snapshot of a project's settings (e.g. before modifying some settings), do 
    <span class=menuref>Project &rArr; Export for backup</span>. 
    The generated file contains only names of files in your project and all the settings;
    it does not include file contents, so the file is really tiny, and it's safe to send it to your colleagues. 
    You will be able to import the backup using  <span class=menuref>Project &rArr; Import</span>.

<a name=building-project-from-command-line></a>
<li><dl><dt>Building project using command line</dt><dd>
    For each project, it's possible to generate a command line script (or .bat file for Windows) 
    that will perform all operations available 
    in <span class=menuref>Build</span> menu. To achieve that, click on 
      <span class=menuref>Project &rArr; Generate buildscript</span> or 
     <span class=menuref>Project &rArr; Generate buildscript as .bat</span>.
    <p>
    It encapsultes all your project settings because it includes a snapshot of all project's configuration, 
    so you will have to regenerate  the script every time you change the options of some modes or 
    add or remove some files from  your project (though no regeneration is necessary if you just edit 
    set of exceptions, as settings are stored in separate file in Project's Input Directory). 
    <p>
    The documentation on using generated buildscripts is 
    <a href=buildscript.shtml>available here</a> - it lists all supported command line flags.
    </dd></dl>

<li><dl><dt>If you need running obfuscator directly from command line</dt><dd> go to  
     <span class=menuref>Tools &rArr; Configure command line tools..</span> 
    to install aliases to command line backends to some directory listed in your PATH environment variable. This
    way you won't have to type full path to command line tools. 
    Use  <span class=menuref>Tools &rArr; Command line builder</span> to generate  command lines.
    </dd></dl>


<li>Project Manager window is a web browser window. So you can use all common web browser shortcuts
    to navigate it, e.g. for going back to previous screen. On Windows, special build of Firefox is used,
    that talks to server via named pipes, to avoid problems with firewalls (as they prevent apps accessing even local
    host). You can turn off this "HTTP over named pipes" mode, and use your favourite browser to work with
    Project Manager.

<li>You can open several windows related to your project using 
    window operations buttons in the topmost right corner of the
     Project Manager window. Using them, you can clone windows.
    So just clone the window, then navigate to any page you need in new window.
    You can even open other project in new window.
    Of course you can also run Project Manager for different obfuscation tools too (e.g. one for JavaScript Obfuscator,
    one for C/C++ Obfuscator).

<li>It's possible to edit a set of exceptions using your favourite editor, as it's stored in plain text file. 
    Go to the  corresponding page in the <span class=menuref>Symbols</spanL menu and find the name of that file 
     at the bottom of the project.

</ul>

<!-- 
 You can put all 3rd-party libraries you use in your code 
    (or header files defining their APIs, in case of C/C++) to the same directory. 
    Simply go to <i>Tools, Extract symbols from directory with source files</i>, enter the 
    name of that directory, select symbol types you wish to gather, and get the list of symbols 
    defined in that directory. Cut them, then paste to <i>"Symbols, User-Specified exceptions"</i>.


-->

</div>



<style type=text/css>
div.doc-guide li { padding-top: 0.7em; }
a.docref:before { content: "[see \""; }
a.docref:after { content: "\"]"; }
a.docref { font-size: 70%; }

h2 { font-size: 120%; padding-top: 1em; padding-left: 2em; }
dl { padding-top: 0em; }

.menuref { font-style: italic; } /* references to menu items */
.rarelyused { text-transform: uppercase; font-size: 70%; font-weight:bold; background: #999; color: white;
     padding: 0.2em 0.6em; }

span.wrap_condition { border: solid 1px black; }
span.wrap_condition_0 { background: #ffe; }
span.wrap_condition_1 { background: #fef; }
span.wrap_condition_2 { background: #eff; }
span.wrap_condition_3 { background: #eef; }

dt { font-weight: bold; }
</style>





<!---AFTER_DOC_CONTENT-->
