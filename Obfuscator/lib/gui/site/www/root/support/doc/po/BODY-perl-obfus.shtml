
<A NAME="__index__"></A>
<!-- INDEX BEGIN -->

<UL>

	<LI><A HREF="#name">NAME</A></LI>
	<LI><A HREF="#synopsis">SYNOPSIS</A></LI>
	<LI><A HREF="#description">DESCRIPTION</A></LI>
	<LI><A HREF="#support for ensuring licensing conditions">Support for ensuring licensing conditions</A></LI>
	<LI><A HREF="#options">OPTIONS</A></LI>
	<LI><A HREF="#return value">RETURN VALUE</A></LI>
	<LI><A HREF="#diagnostics">DIAGNOSTICS</A></LI>
	<LI><A HREF="#examples">EXAMPLES</A></LI>
	<LI><A HREF="#files">FILES</A></LI>
	<LI><A HREF="#caveats">CAVEATS</A></LI>
	<LI><A HREF="#bugs">BUGS</A></LI>
	<LI><A HREF="#notes">NOTES</A></LI>
	<LI><A HREF="#see also">SEE ALSO</A></LI>
</UL>
<!-- INDEX END -->

<HR>
<P>
<HR>
<H1><A NAME="name">NAME</A></H1>
<P>perl-obfus - obfuscate (make more difficult to understand) Perl source code 
programs</P>
<P>
<HR>
<H1><A NAME="synopsis">SYNOPSIS</A></H1>
<P><STRONG>perl-obfus</STRONG> [&nbsp;<STRONG>-v|--version</STRONG>&nbsp;] [&nbsp;<STRONG>--noparsing</STRONG>&nbsp;]
    [&nbsp;<STRONG>--output-line-len</STRONG>&nbsp;<EM>N</EM>&nbsp;]&nbsp;[&nbsp;<STRONG>--jam</STRONG>&nbsp;<EM>0</EM>|<EM>1</EM>&nbsp;]
    [&nbsp;<STRONG>--end-handling</STRONG>&nbsp;<EM>keep</EM>|<EM>skip</EM>|<EM>mangle</EM>]
    [&nbsp;<STRONG>--pod-handling</STRONG>&nbsp;<EM>keep</EM>|<EM>skip</EM>&nbsp;]
    [&nbsp;<STRONG>--old-spacing-mode</STRONG>&nbsp;]
    [&nbsp;<STRONG>--keep-spaces</STRONG>&nbsp;]&nbsp;[&nbsp;<STRONG>--keep-newlines</STRONG>&nbsp;]
    [&nbsp;<STRONG>--bannerhead</STRONG>&nbsp;<EM>filename</EM>]&nbsp;[<STRONG>--bannertail</STRONG>&nbsp;<EM>filename</EM>&nbsp;]
    [&nbsp;<STRONG>--SN</STRONG>&nbsp;<EM>name_of_SN_sub</EM>]&nbsp;[<STRONG>--SNS</STRONG>&nbsp;<EM>name_of_SNS_sub</EM>&nbsp;] 
    [&nbsp;<STRONG>--excludeidentsfile|-x</STRONG>&nbsp;<EM>filename</EM>&nbsp;].. 
    [&nbsp;<STRONG>--excludeidentsfile-anycase</STRONG>&nbsp;<EM>filename</EM>&nbsp;].. 
    [&nbsp;<STRONG>-X</STRONG>&nbsp;<EM>filename</EM>&nbsp;]..
    [&nbsp;<STRONG>--suffixes-asis-list</STRONG>&nbsp;<EM>filename</EM>&nbsp;]..
    [&nbsp;<STRONG>-F</STRONG>&nbsp;<EM>user-defined-mapping-filename</EM>&nbsp;]..
    [&nbsp;<STRONG>-I</STRONG>&nbsp;<EM>include-dirs</EM>&nbsp;]..&nbsp;[&nbsp;<STRONG>-m</STRONG>&nbsp;<EM>module</EM>&nbsp;]..&nbsp;[&nbsp;<STRONG>-M</STRONG>&nbsp;<EM>module</EM>&nbsp;]..
    [&nbsp;<STRONG>-o</STRONG>&nbsp;<EM>destination-filename</EM>&nbsp;]&nbsp;[&nbsp;<STRONG>-P</STRONG>&nbsp;<EM>backend-perl-path</EM>&nbsp;]
    [&nbsp;<STRONG>-d</STRONG>&nbsp;<EM>map-filename</EM>&nbsp;]&nbsp;[<STRONG>--embed-map</STRONG>]&nbsp;[&nbsp;<STRONG>-e</STRONG>&nbsp;<EM>encode-count</EM>&nbsp;]
    [&nbsp;<STRONG>-i</STRONG>&nbsp;<EM>idents-mangling-params</EM>&nbsp;] 
    [&nbsp;<STRONG>-n</STRONG>&nbsp;<EM>number-mangling-params</EM>&nbsp;]
    [&nbsp;<STRONG>-s</STRONG>&nbsp;<EM>string-mangling-params</EM>&nbsp;]    
    [&nbsp;<STRONG>-c</STRONG>&nbsp;<EM>charcode-mangling-params</EM>&nbsp;]     
    [&nbsp;<STRONG>-T</STRONG>&nbsp;<EM>time-asserter-params</EM>&nbsp;]&nbsp;[&nbsp;<STRONG>-H</STRONG>&nbsp;<EM>hostname-asserter-params</EM>&nbsp;]
    [&nbsp;<STRONG>-G</STRONG>&nbsp;<EM>generic-asserter-params</EM>&nbsp;]
    [&nbsp;<STRONG>-O</STRONG>&nbsp;<EM>profile-name</EM>&nbsp;]
	<EM>file-to-obfuscate</EM></P>
<P>
<HR>
<H1><A NAME="description">DESCRIPTION</A></H1>
<P>This program turns Perl source code files into functionally equivalent
Perl source code that is much more difficult to study, analyze
and modify - thus providing you control over intellectual property theft.
This is not compiler, 
thus the code it outputs will perfectly will run on all platforms it was
able to run before. It does this by accessing the parsed form of the
programs - thus it's <STRONG>MUCH</STRONG> more reliable than alternatives that don't
do that; it supports all Perl features including all advanced ones 
like nested regular expressions, expressions in substitution parts of <STRONG>s//</STRONG>
operator, Perl formats. 
It works perfectly with multi-module programs and
for programs that depend on a lot of third-party modules that are not subject
to obfuscation. 
By default it also encodes the obfuscated version of
the file and makes it self-decoding at runtime thus not requiring any 
standalone decoder, and making the file completely non-understandable
by anybody.</P>
<P>Perl-Obfus also allows to ensure licensing conditions of the code 
at runtime by providing
any combination of lifetime period expiration control, 
advanced hostname checking and generic user-defined checks; in case licensing 
conditions are not met,
there is an option to delete obfuscated file automatically, print 
user-defined message and terminate the execution or ability to execute
user-implemented code. 
All checking of licensing conditions are additionally encoded to make them
very difficult to analyze. The block of code that checks for licensing 
conditions can't be removed from the obfuscated program since it's 
made dependant on the initialization functionality performed by 
that block.</P>
<P>Perl-Obfus also has auxilary <EM>no-parsing</EM> mode in which it doesn't try to
obfuscate the code at all, code is only encoded in this mode. This mode
is useful for quick and unperfect source code hiding only. This mode is not
default one, it can be activated by passing <STRONG>--noparsing</STRONG> commandline
switch.</P>
<P>This program obfuscates only one perl source file at a time. By default it
writes obfucated file to stdout, but it's greatly recommended to use the
option <STRONG>-o</STRONG> to get the obfuscated version of the file in the file specified
(since a lot of additional operations are required when simply redirecting
the stdout to any file of choice). 
Note that the same file can't be used as an input and as an output in any
case.</P>
<P>All comments besides the one on the first line are omitted from obfuscated 
file, there is no option to preserve them. It's possible to request
to preserve or to omit POD documentation from obfuscated file via the use
of <STRONG>--pod-handling</STRONG> option. The text after the <EM>__DATA__</EM> and <EM>__END__</EM> 
sections
can be either stripped away, left as is or mangled - per the choice of the
user via the use of <STRONG>--end-handling</STRONG> option (sometimes people put testsuites
for the modules after the <EM>__END__</EM>). It's possible to add comments
with author and copyright information  to the top and to the end of the
obfuscated version of the file using options <STRONG>--bannerhead</STRONG> and
<STRONG>--bannertail</STRONG> respectively. Of course these comments and POD documentation
will appear in clear text form in the obfuscated file, independant of whether
encoding was applied to it.</P>
<P>The obfuscation typically means</P>
<UL>
<LI>
replacing all symbol names it's possible to with the
non-meaningfull ones, e.g. replacing variable <EM>@files</EM> with <EM>@zcadaa4fc81</EM>, while
preserving synaxical and semantical correctness of the source code. Of
course predefined symbols like <EM>@ARGV</EM> and 
symbols from the third-party or standard Perl modules the perl
source code uses will be left
the same so the obfuscated code will still work without requiring to 
obfuscate those third-party or standard Perl modules
<P></P>
<LI>
substitution of numeric values with the arithmetic 
expressions using (random or constant for the same numeric value as requested
by the options) decimial and hexadecimial numeric values that evaluate to the 
same value
<P></P>
<LI>
using hexadecimial character codes for all characters in strings
<P></P>
<LI>
replacing strings with interpolated values with the concatenation of the 
appropriate components
<P></P>
<LI>
adding extra parenthesis for the expressions
<P></P>
<LI>
removing extra white space
<P></P>
<LI>
jamming as much code on each line (of length not more than specified
using <STRONG>--output-line-len</STRONG> option) as possible if <STRONG>--jam=0</STRONG> is not specified
<P></P></UL>
<P>Add to that the fact that the obfuscated code will also be encoded thus 
making the source code completely unreadable.</P>
<P>The non-encoded obfuscated code is extremely difficult to understand for a human since
the name of variables and subroutines and other symbols are totally meaningless
and hard to remember (e.g. <EM>@files</EM> becomes <EM>@zcadaa4fc81</EM>). It's possible
to control most aspects of obfuscation using the commandline switches of the
Perl-Obfus.</P>
<P>If the file being obfuscated is a script (i.e. not a module),
no modification to the original source file is needed for obfuscation to 
succeed. If the file being obfuscated is a module that exports some symbols
by the use of a standard <EM>Exporter</EM> package and these symbols are used
by other files that you also wish to obfuscate, then you have to
make minor modification to the file (otherwise, for obvious reasons, 
after obfuscation, the content of <EM>@EXPORT</EM> variable will be names of 
non-obfuscated symbols, while the symbol names will be obfuscated. 
To overcome this, the perl-obfus supports two special functions with names
<EM>SN</EM> and <EM>SNS</EM> (both names can be changed by the use of <STRONG>--SN</STRONG> 
and <STRONG>--SNS</STRONG>). First one accepts a scalar as an argument, while the second one
- a list. 
For <EM>SN</EM> function, the special support is enabled if its argument is a 
constant string in 
single quotes. For <EM>SNS</EM> function, the special support is enabled if its 
arguments is a constant list produced using single <EM>qw()</EM> operator 
(exactly with parenthesis as delimiters). The special support is treating their arguments 
as symbol names,
and mangling the symbol names as all symbols are mangled.
I.e. <CODE>SN('$a')</CODE> becomes <CODE>SN('$MANGLED_a')</CODE> and
<CODE>SNS(qw($a %b))</CODE> becomes <CODE>SNS(qw($MANGLED_a %MANGLED_b))</CODE> (the names of
functions treated as <EM>SN</EM> and <EM>SNS</EM> will never become obfuscated - so you
don't need to include them in exceptions list). Using other way of passing
arguments to these two special subroutines won't enable the special treating
so you should use only the supported ways only, i.e. the <CODE>SN('$' . &quot;a&quot;)</CODE>
or <CODE>SN(&quot;\$a&quot;)</CODE> or <CODE>SN(q($a))</CODE> or <CODE>SNS('$a','%b')</CODE> or even 
<CODE>SNS(qw[$a %b])</CODE> will be the same as before obfuscation (and thus some
symbols won't be exported from the module being obfuscated). Also <EM>SN</EM> and
<EM>SNS</EM> should be used if your code generates strings that are then 
<EM>eval</EM>'ed - e.g. instead of <CODE>eval('$abc = '. &quot;$value;&quot;)</CODE> you should write
<CODE>eval(SN('$abc') . &quot; = $value;&quot;)</CODE>. If you also need to run your code 
non-obfuscated too, you should cut and paste definitions of the subroutines
<EM>SN</EM> and <EM>SNS</EM> as following:</P>
<PRE>
     sub SN { '';$_[0]; }
     sub SNS { '';@_; }</PRE>
<P>Note, that sometimes you will have to put this inside a <EM>BEGIN{}</EM> block in 
order these subroutines to be visible at the point where they are used.</P>
<P>The script starts a pipe to another (backend) perl process that does part 
of the processing. Note that rather fresh version of perl is required for
backend - <EM>5.7.2</EM> or above, so in some cases you'll have to install it in
parallel to the version of the perl you are using. So you may be required to
pass the location and probably ionvokation options for the perl interpreter
used as a backend using <STRONG>-P</STRONG> switch - e.g. <CODE>-P '/usr/local/bin/perl'</CODE>.</P>
<P>You don't need to install all modules used by the code you are obfuscating 
for the version of perl used for backend.</P>
<P>If the code being obfuscated expects modules in non-standard locations or
needs them preloaded and requires specifying them to be performed via
usual perl's switches <STRONG>-I</STRONG>, <STRONG>-m</STRONG>, <STRONG>-M</STRONG>, then you will have to pass the
same set of switches to the perl-obfus (they will be passed to perl backend
for it to be able to analyze the source code properly).</P>
<P>As was said above, the symbols from third-party and standard modules won't
be mangled. But user needs to gather a list of such symbol names (called
<EM>exceptions</EM> from this point)
using a dedicated utility <EM>gen-ident-exceptions.pl</EM>, and pointing the
names of files with exceptions using <STRONG>--excludeidentsfile</STRONG> or
<STRONG>--excludeidentsfile-anycase</STRONG> options.
For convenience, there is a <STRONG>-X</STRONG> switch that can be passed multiplie 
times to specifies the names of files in which list of 
exceptions to ignore are stored.</P>
<P>It's possible to request Perl-Obfus to save the mapping between obfuscated
symbol names and original symbol names in the external file by passing
the filename after <STRONG>-d</STRONG> switch.</P>
<P>Encoding can be controlled with the <STRONG>-e</STRONG> switch, to completely
turn it off add <CODE>-e 0</CODE> to the perl-obfus command line.</P>
<P>
<HR>
<H1><A NAME="support for ensuring licensing conditions">Support for ensuring licensing conditions</A></H1>
<P>Perl-Obfus has advanced support for ensuring licensing conditions
(not available in Lite or Trial editions).
It's possible to ensure licensing conditions by any combination of the
following criterias:</P>
<DL>
<DT><STRONG><A NAME="item_lifetime_expiration">lifetime expiration</A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_hostname_matching">hostname matching</A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_arbitrary_check_implemented_by_user">arbitrary check implemented by user</A></STRONG><BR>
<DD>
</DL>
<P>Each type of checking criterias is implemented by subengines 
called asserters from here - the specific asserters are called
time asserters, hostname asserters and generic asserters correpondingly
from now. There are several subtypes of asserters of each type, each
with different behaviour; it's possible to enable only one subtype 
of asserters of a given type (i.e. no more than one time asserter, no
more than one hostname asserter, etc).</P>
<P>By default no asserters of any type are enabled.</P>
<P>If any asserter is enabled, the special block of code is prepended to
the obfuscated version of original code; if it was requested to additionally
encode the obfuscated code then the resultant code (special block and
obfuscated version of original code) will be encoded as a whole.</P>
<P>In any case that special block of code will actualy be an encoded version
of the code that will include implementation of all checks and actions
to be performed in case licensing conditions are not met <STRONG>AND</STRONG> special
initialization code without which the obfuscated version of original code will
not work correctly (the special initialization code is in fact
an initialization of variables used in some part of expressions inside the
obfuscated version of original code). 
This means that it's impossible to remove the special block that 
includes checks for ensuring licensing conditions without making
the rest of the code malfunctioning, even if user selected to just
obfuscate (without applying encoding) the original source.</P>
<P>Asserters are configured from a command line in a similar way to 
token mangling parameters. Use <STRONG>-T</STRONG> option to configure time asserters,
<STRONG>-H</STRONG> to configure hostname asserters, <STRONG>-G</STRONG> to configure generic
asserters. See description of the individual asserters of each type 
for more information about their options.</P>
<P>
<HR>
<H1><A NAME="options">OPTIONS</A></H1>
<P>It's possible to store the default commandline options in the globally-visible
file <EM>$instroot/lib/perl-obfus/perl-obfus-settings.pl</EM> (where <STRONG>$instroot</STRONG>
is a directory in which the Perl-Obfus package was installed to). See 
comments in that file for more information.</P>
<P>Note that there is interacive web-based commandline builder for Perl-Obfus 
available at <A HREF="http://www.stunnix.com/support/interactive/cmd-builder/">http://www.stunnix.com/support/interactive/cmd-builder/</A>.</P>
<DL>
<DT><STRONG><A NAME="item_%2Dv%7C%2D%2Dversion"><STRONG>-v|--version</STRONG></A></STRONG><BR>
<DD>
Output version information and exit.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Doutput%2Dline%2Dlen_N"><STRONG>--output-line-len</STRONG> <EM>N</EM></A></STRONG><BR>
<DD>
Set the maximum line length for the obfuscated file. However, if some string
constant will be longer than this limit, it won't be split or otherwise 
wrapped, resulting in a line longer than an amount specified. The default
value for parameter <EM>N</EM> is <EM>80</EM>.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Djam_0%7C1"><STRONG>--jam</STRONG> <EM>0</EM>|<EM>1</EM></A></STRONG><BR>
<DD>
Control whether to omit extra white spaces. When argument is <EM>1</EM>, all extra
white spaces (including carridge returns) are omitted, that makes the
obfuscated file looking even less readable. 
When argument is <EM>0</EM>, the obfuscated (but not encoded) file will look 
like prettyprinted version of the original file with respect to spaces
and newlines.
By default jamming is enabled (value is <EM>1</EM>). 
It's highly recommended not to turn it off
since there are some bugs in the perl interpreter that may make appearing
obfuscated files syntaxically incorrect.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dend%2Dhandling_keep%7Cskip%7Cmangle"><STRONG>--end-handling</STRONG> <EM>keep</EM>|<EM>skip</EM>|<EM>mangle</EM></A></STRONG><BR>
<DD>
Select the way text after <EM>__DATA__</EM> or <EM>__END__</EM> is handled. The 
<EM>mangle</EM> means treat text after <EM>__DATA__</EM> or <EM>__END__</EM> as perl source
code that should be obfuscated, meaning of <EM>keep</EM> and <EM>skip</EM> should be
obvious. Note that <EM>__END__</EM> will become <EM>__DATA__</EM> in the obfuscated
file (this is really innocent). Default value is <EM>keep</EM>.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dpod%2Dhandling_keep%7Cskip"><STRONG>--pod-handling</STRONG> <EM>keep</EM>|<EM>skip</EM></A></STRONG><BR>
<DD>
Select the way POD (plain old documentation) inside source code is handled.
Default value is <EM>keep</EM>.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dold%2Dspacing%2Dmode"><STRONG>--old-spacing-mode</STRONG></A></STRONG><BR>
<DD>
Select spacing algorithm (that decided where space characters were needed
between lexems) that was the only available in versions of 
Perl-Obfus prior to 1.6. This option is present for backward 
compatibility.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dkeep%2Dspaces"><STRONG>--keep-spaces</STRONG></A></STRONG><BR>
<DD>
Request not to skip extra spaces in the lines (whitespaces and tabs) if 
jamming is  enabled (which is the default). By default 
extra spaces in the line are ignored if jamming is enabled.
<P>Note that extra spaces in the lines (whitespaces and tabs) won't correspond
to the ones in the original file, but to certain prettyprinted version of it.</P>
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dkeep%2Dnewlines"><STRONG>--keep-newlines</STRONG></A></STRONG><BR>
<DD>
Request not to skip newlines if jamming is  enabled (which is the default). 
By default newlines are ignored if jamming is enabled.
<P>Note that newlines won't correspond
to the ones in the original file, but to certain prettyprinted version of it.</P>
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dbannerhead_filename"><STRONG>--bannerhead</STRONG> <EM>filename</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2D%2Dbannertail_filename"><STRONG>--bannertail</STRONG> <EM>filename</EM></A></STRONG><BR>
<DD>
Specify the file whoose content will be prepended or appended to the
obfuscated file. This is most useful for adding comments with copyright
and license information. Such comments will be visible as clear text
in any file that was obfuscated and/or encoded.
<P>Note: use <STRONG>--bannertail</STRONG>  only for files that
don't have <EM>__END__</EM> or <EM>__DATA__</EM> sections, since otherwise these sections
will be corrupted (since banner will be appended <STRONG>after</STRONG> the
<EM>__END__</EM> or <EM>__DATA__</EM> sections).</P>
<P></P>
<DT><STRONG><A NAME="item_%2D%2DSN_name_of_SN_sub"><STRONG>--SN</STRONG> <EM>name_of_SN_sub</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2D%2DSNS_name_of_SNS_sub"><STRONG>--SNS</STRONG> <EM>name_of_SNS_sub</EM></A></STRONG><BR>
<DD>
Specify the names of the subs that will be treated as <EM>SN</EM> and <EM>SNS</EM>.
See above for the description on what these subs are for. Default values
are of course <EM>SN</EM> and <EM>SNS</EM>.
<P></P>
<DT><STRONG><A NAME="item_%2DI_include%2Ddirs"><STRONG>-I</STRONG> <EM>include-dirs</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2Dm_module"><STRONG>-m</STRONG> <EM>module</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2DM_module"><STRONG>-M</STRONG> <EM>module</EM></A></STRONG><BR>
<DD>
The options can be specified more than once and 
along with their values are passed down to the perl interpreter
used as a backend, so read more about their meaning in the Perl documentation
(<EM>perlrun</EM>). In most cases there is no need to use these options if the
code being obfuscated runs without passing <STRONG>-I</STRONG>/<STRONG>-m</STRONG>/<STRONG>-M</STRONG> options.
By default no additional <STRONG>-I</STRONG>/<STRONG>-m</STRONG>/<STRONG>-M</STRONG> options are passed to perl 
interpreter used for backend.
<P></P>
<DT><STRONG><A NAME="item_%2DP_backend%2Dperl%2Dpath"><STRONG>-P</STRONG> <EM>backend-perl-path</EM></A></STRONG><BR>
<DD>
Specify the perl interpreter used for backend, and if necessary, additional 
options to pass to that perl interpreter. 
Note: the perl interpreter should be of version 5.7.2 or above! If you don't
have such recent perl installed, you'll have to install it in parallel into
some non-standard directory. The default value for this option is <EM>perl</EM>
(i.e. perl will be searched in the default search path). If your base perl
interpreter is older than 5.7.2, then you may wish to store the default
argument for this option for use by all users of your host - see the very
begining of the section <A HREF="#options">OPTIONS</A> for more information.
<P></P>
<DT><STRONG><A NAME="item_%2Do_destination%2Dfilename"><STRONG>-o</STRONG> <EM>destination-filename</EM></A></STRONG><BR>
<DD>
Output the obfuscated version to the named file. 
If such file exists, it will be deleted before writing to it. 
On unix, the permissions of the source file 
will obey current umask and the executable bit will be set for everybody
if the input file was executable. It's highly recommended to use this
option instead of using redirection available in your shell or you'll 
get into the trouble if the file being obfuscated references packages 
defined in itself. 
There is no default value for this option - i.e. 
the obfuscated file is written to stdout by default.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dexcludeidentsfile_filename"><STRONG>--excludeidentsfile</STRONG> <EM>filename</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2Dx_filename"><STRONG>-x</STRONG> <EM>filename</EM></A></STRONG><BR>
<DD>
This option can be specified more than once. It allows to specify the names of
files that contain a list of symbol names that won't be mangled, one symbol 
per line. 
Such symbols are called exceptions from this point. 
Comments are allowed in such files by placing a hash sign (<CODE>#</CODE>)
as the first character of the line. The file name specified is first searched
in the current directory (if it's not absolute path), and then in the
subdirectory <EM>lib/perl-obfus/exceptions/</EM> of the directory where
Perl-Obfus was installed to.
Most of the exceptions are generated
using <EM>gen-ident-exceptions.pl</EM> script. In very few cases users will have
to manually extend a set of exceptions using hand-written files - see
the description of the syntax of such files in the 
<EM>gen-ident-exceptions.pl's manual</EM>.
There is no need to add perl special variables like <EM>@ARGV</EM> 
and builtin subroutines like <EM>open</EM> - they are already hardcoded in the 
<EM>perl-obfus</EM>.
<P>It's possible to remove symbols from lists of exceptions by passing
names of files with these symbol names using <STRONG>-X</STRONG> switch.</P>
<P>The <EM>filename</EM> can be name of directory, in this case all files located
in this directory and any of its subdirectories (at any depth) are 
loaded as if the names of these files were specified individually one-by-one.</P>
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dexcludeidentsfile%2Danycase_filename"><STRONG>--excludeidentsfile-anycase</STRONG> <EM>filename</EM></A></STRONG><BR>
<DD>
This option is very similar to <STRONG>--excludeidentsfile</STRONG>, except that symbols
read from the specified file are treated as case-insensitive exceptions. 
This functionality is useful for listing methods and properties of ActiveX 
objects, that are case-insensitive.
<P>The <EM>filename</EM> can be name of directory, in this case all files located
in this directory and any of its subdirectories (at any depth) are 
loaded as if the names of these files were specified individually one-by-one.</P>
<P></P>
<DT><STRONG><A NAME="item_%2DX_filename"><STRONG>-X</STRONG> <EM>filename</EM></A></STRONG><BR>
<DD>
This option can be specified more than once. It allows to specify the names of
files that contain a list of symbol names that should be mangled, even
if those symbol names were in the files with names passed with <STRONG>-x</STRONG> switch
(i.e. for disabling some exceptions). At first files specified with <STRONG>-x</STRONG>
switch are processed, and then files specified with <STRONG>-X</STRONG>
switch are processed.
<P>Comments are allowed in such files by placing a hash sign (<CODE>#</CODE>)
as the first character of the line. The file name specified is first searched
in the current directory (if it's not absolute path), and then in the
subdirectory <EM>lib/perl-obfus/exceptions/</EM> of the directory where
Perl-Obfus was installed to.</P>
<P>This option is mostly useful in case the set of exceptions created from
builtin list and content of files passed with <STRONG>-x</STRONG> switch is too 
broad.</P>
<P>The <EM>filename</EM> can be name of directory, in this case all files located
in this directory and any of its subdirectories (at any depth) are 
loaded as if the names of these files were specified individually one-by-one.</P>
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dsuffixes%2Dasis%2Dlist_filename"><STRONG>--suffixes-asis-list</STRONG> <EM>filename</EM></A></STRONG><BR>
<DD>
This option can be specified more than once. It allows to specify the names of
files that contain a list of suffixes that should be preserved in
symbols being mangled. E.g. if suffix <EM>onclick</EM> is listed in some file
mentioned by this option, then symbol <EM>myButton_onclick</EM> will be
mangled to something like <EM>z2b9a0ec6d_onclick</EM>, rather than to
something like <EM>za40f93e635d</EM>.
<P>Comments are allowed in such files by placing a hash sign (<CODE>#</CODE>)
as the first character of the line. The file name specified is first searched
in the current directory (if it's not absolute path), and then in the
subdirectory <EM>lib/perl-obfus/exceptions/</EM> of the directory where
Perl-Obfus was installed to.</P>
<P>This option is mostly useful for protecting code for environments, that scan
name of symbol for some suffix in order to treat the symbol specially.</P>
<P>The <EM>filename</EM> can be name of directory, in this case all files located
in this directory and any of its subdirectories (at any depth) are 
loaded as if the names of these files were specified individually one-by-one.</P>
<P></P>
<DT><STRONG><A NAME="item_%2DF_user%2Ddefined%2Dmapping%2Dfilename"><STRONG>-F</STRONG> <EM>user-defined-mapping-filename</EM></A></STRONG><BR>
<DD>
This option can be specified more than once. It allows to specify the names of
files that contain user-specified mapping of symbols.
<P>Comments are allowed in such files by placing a hash sign (<CODE>#</CODE>)
as the first character of the line. Each line in such file contains two 
symbols: name of original symbol, one or more space characters, and required 
resultant symbol.</P>
<P>In case some mangling engine decides to assign a symbol that is listed as
resultant symbol, special attempts will be made to guarantee that the symbol
chosen by obfuscation engine won't conflict with it (by adding prefixes
until unqueness is reached).</P>
<P></P>
<DT><STRONG><A NAME="item_%2Dd_map%2Dfilename"><STRONG>-d</STRONG> <EM>map-filename</EM></A></STRONG><BR>
<DD>
This option specifies the name of file to write the mapping between
obfuscated symbol names and non-obfuscated symbol names to.
Such mapping may be useful for analyzing Perl error messages that contain
obfuscated symbol names - just find the line with the symbol Perl interpreter
complained about, and the second word on that line will be the original
symbol name. Please keep in mind that it will be much easier for a 
person having access to such mapfile to study the code, so 
it's highly suggested to keep such map file in secure place and not
to distribute it to the customers.
<P>If the file specified with this option exists, the accumulated mapping
information will be <STRONG>merged</STRONG> with mapping information previously 
stored in the file - this allows one to have map file for entire project.</P>
<P>By default no filename is specified, and thus mapping information 
is not saved anywhere.</P>
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dembed%2Dmap"><STRONG>--embed-map</STRONG></A></STRONG><BR>
<DD>
This option instructs the mapping between obfuscated symbol names and
original  symbol names to be appended inside a comment to the result of
processing, in form of couple of strings per line - obfuscated symbol name
 and original  symbol name. For symbols that are exceptions (i.e. for ones
obfuscated symbol name is the same as original) such lines are not emitted
at all. Lines are emitted only for symbols found in subject file.
<P>By default this mapping information is not embedded at all.</P>
<P></P>
<DT><STRONG><A NAME="item_%2De_encode%2Dcount"><STRONG>-e</STRONG> <EM>encode-count</EM></A></STRONG><BR>
<DD>
This option controls the number of encoding iterations to be applied
to obfuscated file. To disable encoding completely 
one should specify <EM>0</EM> as number of encoding iterations.
It's not recommended to apply more than 30 encoding iterations.
Each encoding iteration increases output file size. The relation between
non-encoded obfuscated file size and encoded obfuscated file size 
is approximately the following: <EM>E=I*2+N*450</EM> where <EM>E</EM> is encoded
size, <EM>I</EM> is non-encoded obfuscated size, and <EM>N</EM> is the number of iterations
applied. The default value for this option is <EM>10</EM>.
<P></P>
<DT><STRONG><A NAME="item_%2D%2Dnoparsing"><STRONG>--noparsing</STRONG></A></STRONG><BR>
<DD>
This is additional mode of operation in which Perl-Obfus only encodes the file. 
In this mode no parsing of code is performed, no obfuscation of any
type applied (e.g variables are not renamed, numbers are not turned to 
expressions, and so on) and comments are not removed, but the original code 
becomes unreadable. Code encoded in this mode is <STRONG>guaranteed</STRONG> to work the 
same way it was working before encoding, without a need of <STRONG>any</STRONG> 
modifications to it.
<P>If this mode is activated, only the following options are in effect:
all related to encoding - i.e. <STRONG>-e</STRONG>, and 
<STRONG>--bannerhead</STRONG>, <STRONG>--bannertail</STRONG>
,<STRONG>--pod-handling</STRONG>, <STRONG>-o</STRONG>
.</P>
<P></P>
<DT><STRONG><A NAME="item_%2Di_idents%2Dmangling%2Dparams"><STRONG>-i</STRONG> <EM>idents-mangling-params</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2Dn_number%2Dmangling%2Dparams"><STRONG>-n</STRONG> <EM>number-mangling-params</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2Ds_string%2Dmangling%2Dparams"><STRONG>-s</STRONG> <EM>string-mangling-params</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2Dc_charcode%2Dmangling%2Dparams"><STRONG>-c</STRONG> <EM>charcode-mangling-params</EM></A></STRONG><BR>
<DD>
Specify options for mangling of tokens of each type.
The argument is <EM>mangling-specification</EM>, that has the following syntax:
<P><EM>obfuscator-title</EM>[,<EM>option</EM>=<EM>value</EM>]..</P>
<P>Tokens of each type can be mangled using different approaches, each approach
corresponds to <EM>obfuscator</EM>, identified by <EM>obfuscator-title</EM>. Each
<EM>obfuscator</EM> can have options that alter its behaviour, in order to specify
them the comma separated
<EM>option</EM>=<EM>value</EM> pairs may follow <EM>obfuscator-title</EM> after a comma.</P>
<P>The <EM>mangling-specification</EM> specifies all details on how to mangle tokens
of each type, so if multiplie occurences of the option are specified, the last
one is taken into the effect.</P>
<P>For each type of token a special obfuscator with title <EM>none</EM> is available - 
it doesn't alter the tokens in any way.</P>
<P>Here is a list of <EM>obfuscators</EM> for each type of the token, with the options
they support.</P>
<DL>
<DT><STRONG><A NAME="item_%2Di_%3D_obfuscators_for_symbol_names"><STRONG>-i</STRONG> = obfuscators for symbol names</A></STRONG><BR>
<DD>
It's obvious that symbols with the same name should be 
obfuscated  to the same name, independant of location in the program
these symbol names are locatged. It also should be obvious that entire set of modules 
and scripts that uses them should be obfuscated using the same value of
<EM>mangling-specification</EM> - otherwise there will appear undeclared symbols.
<DL>
<DT><STRONG><A NAME="item_obfuscator_none">obfuscator <STRONG>none</STRONG></A></STRONG><BR>
<DD>
Selecting this obfuscator will keep symbol names unchanged.
<P></P>
<DT><STRONG><A NAME="item_obfuscator_combs">obfuscator <STRONG>combs</STRONG></A></STRONG><BR>
<DD>
This obfuscator replaces names of symbols with names consisting of all
possible combinations of characters, specified via option <EM>spec</EM>,
of the length specified via option <EM>minlen</EM>. E.g. it 
can replace <EM>formname</EM> with <EM>IlI</EM> and <EM>mystr</EM> with <EM>llI</EM> 
(which both look very similar to the  human eye) if user specified
the value of <EM>spec</EM> option as <EM>Il</EM>. The resulting symbol name depends only
on original symbol name and the value of <EM>seed</EM> option, calculation of
some md5 sum of the string formed from these two items is used to generate
resultant symbol name. The md5 algorithm can produce same sum value for
different arguments - in which case so-called md5sum-collision occurs.
The detection of collisions for symbols in the current file is done 
automatically. It's possible to activate detection of collisions for symbols 
in entire project by the use of <EM>adhere-mapfile</EM> option of this symbol
obfuscator.
If option <EM>adhere-mapping</EM> is specified for this obfuscator and has non-zero
value and if mapfile name is specified via global option <EM>-d</EM>, then 
Perl-Obfus will read specified mapfile at startup, and will 
try to lookup the original symbol names in it and use a replacement from that
file if found; it will also ensure that protected symbols that were produced
during that invokation of Perl-Obfus are not assigned to any symbol 
listed in mapfile (and if it encounters some obfuscated symbol it was going 
to use as a replacement as being used as a replacement for another symbol
(i.e. so-called ``hash-collision'' occurs) then execution of Perl-Obfus
is aborted with error message - in which case it's necessary to
clear mapfile, change the seed and/or increase value of <EM>len</EM> option
and protect entire application again); after processing completes, mapfile will
be updated as usual. 
Note, that <EM>shortest</EM> symbol obfuscator also can generate protected symbols 
using all possible combinations of characters, but it allows to generate
shortest names possible at the same time (by requiring 2 passes on each 
source file).
<P>Options:</P>
<DL>
<DT><STRONG><A NAME="item_adhere%2Dmapfile"><STRONG>adhere-mapfile</STRONG></A></STRONG><BR>
<DD>
See description of <EM>combs</EM> obfuscator for more information on this option.
The default value is <EM>0</EM>.
<P></P>
<DT><STRONG><A NAME="item_seed"><STRONG>seed</STRONG></A></STRONG><BR>
<DD>
The value of this option affects the order in which all possible combinations
of characters used for symbol name are chosen. The value can be arbitrary string.
<P></P>
<DT><STRONG><A NAME="item_minlen"><STRONG>minlen</STRONG></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_len"><STRONG>len</STRONG></A></STRONG><BR>
<DD>
Minimal length of generated symbol. Once all combinations of characters
of a given length were used for generating symbol names, the length 
of resultant symbol name is automatically increased. This means it's not
necessary to make the value of this option very long - set it to big
enough value that makes your code acceptably unreadable and acceptably big.
It's impossible to assign value lower than 4 to this option.
The default value is for this option is <EM>10</EM>.
<P></P>
<DT><STRONG><A NAME="item_spec"><STRONG>spec</STRONG></A></STRONG><BR>
<DD>
The value of this option instructs which characters can be used for generating
names of symbols, the value should either be string that is a 
concatenation of all characters
possible in the resultant symbol name, e.g. <EM>Il</EM> or <EM>OQ</EM>, or a couple of 
such strings separated by colon, in which case a string before the colon
specifies characters that can be used for leading symbol's character, and
string after the colon specifies characters that can be used for all characters
of the symbol except the first (the leading) - e.g. <EM>lI:lI1</EM> or <EM>O:O0</EM>.
The recommended values are <EM>lI</EM>, <EM>O:O0</EM> and <EM>lI:lI1</EM>.
If this option is not specified, it's assumed that all characters
allowed for Perl language to be used for symbols can form a 
resultant symbol name.
<P></P></DL>
<DT><STRONG><A NAME="item_obfuscator_md5">obfuscator <STRONG>md5</STRONG></A></STRONG><BR>
<DD>
This obfuscator calculates md5 sum of the string produced by concatentation
of a constant prefix (that can be passed via <STRONG>seed</STRONG> option) and the symbol 
name to be obfuscated. After that from the hexadecimial representation of the
md5sum several (exact length is specified using <STRONG>len</STRONG> option)
leading characters are appended to another prefix
(that can be set via <STRONG>prefix</STRONG> option) to form obfuscated symbol name.
<P>It's obvious that in theory it's possible to get md5sum collision - the 
critical situation when two different symbols will be obfuscated to the same 
symbol name. When such situation is detected, the obfuscation is aborted.
The detection of collisions for symbols in the current file is done 
automatically. If detection of collisions for symbols in entire project
is required, one can use <EM>adhere-mapfile</EM> option for enforcing uniqueness
of protected symbols across all files - please read the description of
symbol name obfuscator <EM>combs</EM>.
The only solution in case md5sum collision is detected is to change the value 
of the <STRONG>seed</STRONG> option or to increase
the value of the <STRONG>len</STRONG> option. However, such situations are very rare.</P>
<P>This is the default obfuscator for symbol names.</P>
<P>Options:</P>
<DL>
<DT><STRONG><STRONG>adhere-mapfile</STRONG></STRONG><BR>
<DD>
See description of <EM>combs</EM> obfuscator for more information on this option.
The default value is <EM>0</EM>.
<P></P>
<DT><STRONG><STRONG>seed</STRONG></STRONG><BR>
<DD>
See above for a description of this option. The value can be arbitrary string.
The default value is generated as random string at the Perl-Obfus suite 
installation time, so it will be unique for each user of Perl-Obfus.
<P></P>
<DT><STRONG><STRONG>len</STRONG></STRONG><BR>
<DD>
Specifies how many characters of the hexadecimial representation of the md5 
sum to use for obfuscated name of the symbol. The less the value, the shorter
all identifiers will be, the smaller obfuscated code will become, and the
easier it will be for human to study the code. Also increasing the value
lowers the probability of md5sum collision. The default value is <EM>10</EM>.
<P></P>
<DT><STRONG><A NAME="item_prefix"><STRONG>prefix</STRONG></A></STRONG><BR>
<DD>
Specifies the prefix of all mangled symbol names. It should non-empty string
(one character is enough) just because hex representation of md5sum can begin
with a digit. There is no point in changing the prefix. The default value is
<EM>z</EM>.
<P></P></DL>
<DT><STRONG><A NAME="item_obfuscator_prefix">obfuscator <STRONG>prefix</STRONG></A></STRONG><BR>
<DD>
This obfuscator just prepends the same string (specified via <STRONG>str</STRONG> option)
to all symbol names to get the obfuscated symbol name. This obfuscator is
designed to be used for initial testing of obfuscated code for locations of
use of undeclared symbols in obfuscated code. It's obvious that 
while testing obfuscated code it's much more easier  to find out what symbol 
is undeclared if it's trivial to correlate that symbol of the obfuscated
program with the symbol of the non-obfuscated program.
<P>Options:</P>
<DL>
<DT><STRONG><A NAME="item_str"><STRONG>str</STRONG></A></STRONG><BR>
<DD>
The string to prepend to all symbol names. Default value is <EM>Z439Z_</EM>.
<P></P></DL>
<DT><STRONG><A NAME="item_obfuscator_shortest">obfuscator <STRONG>shortest</STRONG></A></STRONG><BR>
<DD>
This obfuscator replaces each symbol name with the shortest identifier
possible, using the shorter identifiers for symbols that are used more
times. Using this obfuscator and <EM>none</EM> obfuscators for strings and
numbers will produce the most compact version of the code possible, that
will be smaller than the original one. The presence of this obfuscator
turns Perl-Obfus into so-called source code <EM>``compressor''</EM>.
<P>It's perfectly suitable for multimodule projects too.
There are two modes of operation this obfuscator works in 
(controlled by its parameter <STRONG>countupdate</STRONG>) - scanning through the project 
files for computing the use counts for all symbols (used if 
parameter <STRONG>countupdate</STRONG> is passed value <EM>1</EM>) and saving the
counts to a special file hereafter called <EM>countsfile</EM> 
(whose name is specified as value of 
parameter <STRONG>countsfile</STRONG>) or performing the obfuscation
itself using the symbol use counts from <EM>countsfile</EM> gathered during 
first mode of operation
(used if parameter <STRONG>countupdate</STRONG> is passed value <EM>0</EM>, or if
this parameter is not specified at all). In the obfuscation mode
obfuscator maintains its state (a mapping between original symbols and
obfuscated ones) in the file whose name specified as a value of
parameter <STRONG>statefile</STRONG> (hereafter such file will be called <EM>statefile</EM>).</P>
<P>Note that file with symbol counts should be uptodate
- at least it should mention all symbols that are subject to obfuscation - 
so if you added some code and introduced some new symbol, you'll have to 
regenerate <EM>countsfile</EM>. Perl-Obfus aborts execution if it 
encounters that some symbol was not counted at all, with diagnostics indicating
that <EM>countsfile</EM> needs to be rebuilt. Rebuilding <EM>countsfile</EM> means
deleting (or truncating) the <EM>countsfile</EM> and <EM>statefile</EM> and running 
Perl-Obfus in symbol count gathering mode on all files of the project.
If your change to the code didn't introduce new symbols but just
increased or decreased the use of already existing ones, it won't abort
the execution but there will be a chance that size of resultant obfuscated
file won't be the smallest possible.</P>
<P>So the common approach to using this obfuscator for symbol names is:
develop and debug the code, delete files <EM>a-file-with-counts</EM> and
<EM>a-file-with-state</EM>, then run the Perl-Obfus with options
like this  <CODE>-i shortest,countupdate=1,countsfile=a-file-with-counts</CODE> for all
source files in the project to gather symbol counts to the file
<EM>a-file-with-counts</EM>, and then run Perl-Obfus with options
like this  
<CODE>-i shortest,countupdate=0,countsfile=a-file-with-counts,statefile=a-file-with-state</CODE>
for all source files in the project.</P>
<P>By default each symbol name is obfuscated to the unque, but random identifier
of the length corresponding to the number of occurencies of the
given symbol. That randomness of identifier can be disabled by passing
value <EM>0</EM> for parameter <STRONG>dontshuffle</STRONG> - this will force e.g. first symbol in 
the first source file of the project to always be obfuscated to the name
<EM>c</EM>
(provided there is no exception with the same name).</P>
<P>It's possible to specify a set of characters that can be used for resultant
symbol names by the use of <EM>spec</EM> option - e.g. one can make code very hard
to analyze without modification by asking to use only symbols <EM>I</EM> and <EM>l</EM>
for names of symbols - that will produce symbols like <EM>IllII</EM> or <EM>IIlIIl</EM>
which look very similar in the most fonts (but of course this won't result
in smallest output). 
The use of this option makes <EM>shortest</EM> obfuscator a reliable version
of <EM>combs</EM> obfuscator for multi-module projects, since it eliminates
a chance for a case when two different symbols in two different modules
(in which only one of the symbols is used) getting replaced with the same
resultant symbol (which is possible in theory, but has a very small 
possibility).</P>
<P>Options:</P>
<DL>
<DT><STRONG><A NAME="item_countsfile"><STRONG>countsfile</STRONG></A></STRONG><BR>
<DD>
Location of the <EM>countsfile</EM> - the file containing use counts for all symbols.
<P></P>
<DT><STRONG><A NAME="item_countupdate"><STRONG>countupdate</STRONG></A></STRONG><BR>
<DD>
Selects the mode of obfuscator - gathering symbol use counts 
(if value is <EM>1</EM>) or obfuscating (value is <EM>0</EM>). Default value is <EM>0</EM>.
<P></P>
<DT><STRONG><A NAME="item_statefile"><STRONG>statefile</STRONG></A></STRONG><BR>
<DD>
Specifies the name of the file with the state information used internally
by obfuscator when it's in obfuscation mode.
<P></P>
<DT><STRONG><A NAME="item_dontshuffle"><STRONG>dontshuffle</STRONG></A></STRONG><BR>
<DD>
Instructs not to select random name of the given length as obfuscated symbol
name, but to select the next one by alphabet not being an exception.
<P></P>
<DT><STRONG><STRONG>minlen</STRONG></STRONG><BR>
<DD>
Instructs the minimal length of resultant symbol name. Default value is <EM>1</EM>.
<P></P>
<DT><STRONG><STRONG>spec</STRONG></STRONG><BR>
<DD>
The value of this option instructs which characters can be used for generating
names of symbols, the value should either be string that is a 
concatenation of all characters
possible in the resultant symbol name, e.g. <EM>Il</EM> 
(that will produce symbols like <EM>IllII</EM> or <EM>IIlIIl</EM>)
or <EM>OQ</EM> (that will produce symbols like <EM>OQOOQQ</EM> or <EM>QOOQQO</EM>), 
or a couple of 
such strings separated by colon, in which case a string before the colon
specifies characters that can be used for leading symbol's character, and
string after the colon specifies characters that can be used for all characters
of the symbol except the first (the leading) - e.g. <EM>lI:lI1</EM> 
(that will produce symbols like <EM>I1lII1</EM> or <EM>lI1IIl1</EM>)
or <EM>O:O0</EM>.
The recommended values are <EM>lI</EM>, <EM>O:O0</EM> and <EM>lI:lI1</EM>.
The use of this option makes <EM>shortest</EM> obfuscator a reliable version
of <EM>combs</EM> obfuscator for multi-module projects.
If this option is not specified, it's assumed that all characters
allowed for Perl language can form a resultant symbol name.
<P></P></DL>
</DL>
<DT><STRONG><A NAME="item_%2Dn_%3D_obfuscators_for_numeric_constants"><STRONG>-n</STRONG> = obfuscators for numeric constants</A></STRONG><BR>
<DD>
There is only one non-trivial obfuscator for numeric constants currently - 
<STRONG>sum3</STRONG>. It's the default.
<DL>
<DT><STRONG>obfuscator <STRONG>none</STRONG></STRONG><BR>
<DD>
Selecting this obfuscator will keep numbers unchanged.
<P></P>
<DT><STRONG><A NAME="item_obfuscator_sum3">obfuscator <STRONG>sum3</STRONG></A></STRONG><BR>
<DD>
This obfuscator replaces the constant value with an arithmetic expression
consisting of addition and substraction operations on either 3 constant numeric 
values (in case no asserters were enabled) or 2 constant numeric values 
and 1 constant variable (in case some asserters were enabled - please
note that asserters are not supported in Lite or Trial version of the Product),
which are represented as decimial and hexadecimial values (their
radixes can be changed by altering <STRONG>format</STRONG> option). For different occurencies
of the same constant numeric values, the choice is provided between
using the same values used in expressions, or using 2 random values and one 
computed - this is controlled using <STRONG>const</STRONG> option. If you wish to make
analysis of the differencies between revisions of your software more difficult, 
you should request the use of 2 random values and one  computed in the 
expression - this way after each obfuscation each obfuscated file will differ
from the previous run of obfuscator. This is the default obfuscator
(in fact it's the only non-trvial one for numeric constants).
<P>Options:</P>
<DL>
<DT><STRONG><A NAME="item_const"><STRONG>const</STRONG></A></STRONG><BR>
<DD>
Specifies whether for the same numeric constant the obfuscation 
should produce different substitution expression (the value for the option
is <EM>0</EM>) or same expressuib (the value for the option is <EM>1</EM>). 
Default value is <EM>0</EM>.
<P></P>
<DT><STRONG><A NAME="item_format"><STRONG>format</STRONG></A></STRONG><BR>
<DD>
Specifies the sprintf format string for the obfuscated substitutor.
The default value is 
<EM>(0x%04x+% 4d-0x%04x)</EM>.
<P></P>
<DT><STRONG><A NAME="item_format_var"><STRONG>format_var</STRONG></A></STRONG><BR>
<DD>
Specifies the sprintf format string for the obfuscated substitutor in case
a variable and 2 constants are used.
The default value is 
<EM>(0x%04x+% 4d-%s)</EM>.
<P></P>
<DT><STRONG><A NAME="item_var_use_ratio"><STRONG>var_use_ratio</STRONG></A></STRONG><BR>
<DD>
In case some asserters were enabled, specifies the ratio of occurencies
of expressions that involve variables compared to all numeric constants
occured in the source code. E.g. if you wish that half of the numeric
constants in your code referenced variables, you should set the value
of this parameter to 0.5. It's not recommended to set this parameter
to <EM>0</EM> for obvious reasons. The expressions in the code use references 
to variables, the bigger code is (expression with reference to variable is 
larger than expression without them by about 7-9 bytes).
The default value is <EM>0.25</EM>.
<P></P></DL>
</DL>
<DT><STRONG><A NAME="item_%2Ds_%3D_obfuscators_for_string_constants"><STRONG>-s</STRONG> = obfuscators for string constants</A></STRONG><BR>
<DD>
These make constant strings more difficult to read. 
The default string obfuscator is <STRONG>hexchar</STRONG>.
The default string obfuscator is <STRONG>none</STRONG> - that is, strings are not mangled
at all.
<DL>
<DT><STRONG>obfuscator <STRONG>none</STRONG></STRONG><BR>
<DD>
Selecting this obfuscator will keep strings unchanged.
<P></P>
<DT><STRONG><A NAME="item_obfuscator_hexchar">obfuscator <STRONG>hexchar</STRONG></A></STRONG><BR>
<DD>
This obfuscator substitutes each character of the string with reverse slash
and it's code, by default in hexadecimial notation - e.g. string <EM>``abc''</EM> is substituted
with <EM>``\x61\x62\x63''</EM>.
<DL>
<DT><STRONG><STRONG>format</STRONG></STRONG><BR>
<DD>
Specifies the sprintf format string for each character's substitutor.
The default value is <EM>'\\x%x'</EM>.
<P></P></DL>
<DT><STRONG><A NAME="item_obfuscator_list4chr">obfuscator <STRONG>list4chr</STRONG></A></STRONG><BR>
<DD>
This obfuscator substitutes a string with the 
<EM>(join(``'',map { chr($_); } (@list_of_character_codes))</EM>. The 
<EM>@list_of_character_codes</EM> is inline list of expressions that evaluate
to integers. 
Each item in the list corresponds to the character of the
string being obfuscated. Each character is created by composing a character
with code computed as numeric expression that is produced using obfuscator 
for numeric constants; the parameters for this obfuscator are passed using <STRONG>-c</STRONG> option
and have the same meaning as parameters to the obfuscator for numeric 
constants passed using <STRONG>-n</STRONG> option. The default value of parameter for the <STRONG>-c</STRONG>
option is the same as for <STRONG>-n</STRONG>. The <STRONG>list4chr</STRONG> obfuscator is designed
in order to make automatic deobfuscation of string constants 
someone may like to implement more complicated.
<P></P></DL>
<DT><STRONG><A NAME="item_%2Dc_%3D_obfuscator_for_character_codes"><STRONG>-c</STRONG> = obfuscator for character codes</A></STRONG><BR>
<DD>
Please read the description of the <STRONG>list4chr</STRONG> obfuscator for string
codes (a previous paragraph). <STRONG>none</STRONG> obfuscator will not obfuscate character
codes at all (but the string will still be unreadable).
<P></P></DL>
<DT><STRONG><A NAME="item_%2DT_time%2Dasserter%2Dparams"><STRONG>-T</STRONG> <EM>time-asserter-params</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2DH_hostname%2Dasserter%2Dparams"><STRONG>-H</STRONG> <EM>hostname-asserter-params</EM></A></STRONG><BR>
<DD>
<DT><STRONG><A NAME="item_%2DG_generic%2Dasserter%2Dparams"><STRONG>-G</STRONG> <EM>generic-asserter-params</EM></A></STRONG><BR>
<DD>
Specify options for asserters of each type (not available in Lite or Trial version
of the product).
The argument is <EM>asserter-specification</EM>, that has the following syntax:
<P><EM>asserter-title</EM>[,<EM>option</EM>=<EM>value</EM>]..</P>
<P>There are several subtypes of asserters for each type. The subtype is selected
by <EM>asserter-title</EM>. Each
<EM>asserter</EM> can have options that alter its behaviour, in order to specify
them the comma separated
<EM>option</EM>=<EM>value</EM> pairs may follow <EM>asserter-title</EM> after a comma.</P>
<P>For each type of asserters a special asserter with title <EM>none</EM> is available - 
it doesn't perform any action.</P>
<P>Here is a list of <EM>asserter-title</EM>s for each type of the asserters, with the 
options they support.</P>
<DL>
<DT><STRONG><A NAME="item_%2DT_%3D_time_asserters"><STRONG>-T</STRONG> = time asserters</A></STRONG><BR>
<DD>
Time asserters insure that some condition about the point of time the script
was started at is true.
<DL>
<DT><STRONG><A NAME="item_asserter_expire">asserter <STRONG>expire</STRONG></A></STRONG><BR>
<DD>
This asserter insures that current date and time is less than one specified
via <STRONG>whenexpires</STRONG> option. There way used to acquire current date and time
is specified via <STRONG>source</STRONG> option. If condition is violated, the code finishes
execution after performing all other actions requested. 
It's possible to request that main module of the program to be
erased by setting option <STRONG>onviolated-destroy</STRONG> to <EM>1</EM>. 
The warning, specified
via option <STRONG>onviolated-message</STRONG> will be printed if value of option
<STRONG>onviolated-warn</STRONG> is <EM>1</EM>.
<P>Options:</P>
<DL>
<DT><STRONG><A NAME="item_whenexpires"><STRONG>whenexpires</STRONG></A></STRONG><BR>
<DD>
Specifies the date and time after which program should stop working.
The format of this parameter can be either number of seconds since 1 Jan 1970,
or human representation of the absolute date and time like <EM>20 Apr 2004 15:43</EM> 
or <EM>2004/4/20 15:43</EM>, or relative date and time of the form 
``now + count units time-spec'' like ``now + 2 weeks 9:00'' 
(i.e. any format Perl module Time::ParseDate recognizes).
If the value is a string <EM>0</EM>, then the asserter is disabled. Default value
is <EM>0</EM>.
<P></P>
<DT><STRONG><A NAME="item_onviolated%2Dwarn"><STRONG>onviolated-warn</STRONG></A></STRONG><BR>
<DD>
If <EM>1</EM>, directs message specified via <STRONG>onviolated-message</STRONG> to be printed.
Default value is <EM>0</EM>.
<P></P>
<DT><STRONG><A NAME="item_onviolated%2Dmessage"><STRONG>onviolated-message</STRONG></A></STRONG><BR>
<DD>
Specifies the message to be printed in case value of <STRONG>onviolated-warn</STRONG> is 
<EM>1</EM>. The trailing newline will be automatically appended. 
Escape sequences are allowed.
Please be sure to quote the message properly in order the shell passed the
message as a single string. 
Default value is <EM>``Content-type: text/html\n\nThe script has expired, please contact webmaster.''</EM>.
<P></P>
<DT><STRONG><A NAME="item_onviolated%2Ddestroy"><STRONG>onviolated-destroy</STRONG></A></STRONG><BR>
<DD>
If <EM>1</EM>, directs main module of the program to be destroyed in case
licensing conditions are not met. 
Default value is <EM>0</EM>.
<P></P>
<DT><STRONG><A NAME="item_source"><STRONG>source</STRONG></A></STRONG><BR>
<DD>
Specifies the source of information about current time. 
The possible options are:
<DL>
<DT><STRONG><A NAME="item_builtin%2Dtime"><STRONG>builtin-time</STRONG></A></STRONG><BR>
<DD>
The value returned by builtin <EM>time()</EM> function.
<P></P>
<DT><STRONG><A NAME="item_atime%2Dof%2Dself"><STRONG>atime-of-self</STRONG></A></STRONG><BR>
<DD>
Access time of the script. May be non-informative on filesystems mounted
with ``noatime'' option.
<P></P>
<DT><STRONG><A NAME="item_mtime%2Dof%2Dtmp"><STRONG>mtime-of-tmp</STRONG></A></STRONG><BR>
<DD>
Modification time of <EM>/tmp</EM>. May be non-informative on some systems.
<P></P>
<DT><STRONG><A NAME="item_mtime%2Dof%2D%2Fproc%2Fuptime"><STRONG>mtime-of-/proc/uptime</STRONG></A></STRONG><BR>
<DD>
Modification time of <EM>/proc/uptime</EM>. This is Linux-specific, and even some
Linux systems don't make /proc/uptime accessible to users.
<P></P>
<DT><STRONG><A NAME="item_%2Fbin%2Fdate%2F"><STRONG>/bin/date/</STRONG></A></STRONG><BR>
<DD>
The output of <EM>/bin/date +%s</EM>.
<P></P></DL>
<P>For all cases <EM>time()</EM> is used as a fallback source of information in
case primary method is not available. For Unix systems, <EM>/bin/date</EM> 
seems to be the most reliable and trusted source of information.</P>
<P>Default value of this option is <EM>builtin-time</EM>.</P>
</DL>
</DL>
<DT><STRONG><A NAME="item_%2DH_%3D_hostname_asserters"><STRONG>-H</STRONG> = hostname asserters</A></STRONG><BR>
<DD>
In case the conditions
are not met, the script is terminated. If parameter
<STRONG>onviolated-warn</STRONG> is <EM>1</EM>, the message specified by parameter 
<STRONG>onviolated-message</STRONG> is displayed.
It's possible to request that main module of the program to be
erased by setting option <STRONG>onviolated-destroy</STRONG> to <EM>1</EM>.
<P>All of these asserters support the same set of parameters:</P>
<DL>
<DT><STRONG><A NAME="item_matches"><STRONG>matches</STRONG></A></STRONG><BR>
<DD>
The string interpreted differently by each asserter, it's a host name
for <STRONG>single-host</STRONG> asserter, a plus-separated list of allowed host suffixes 
for <STRONG>hosttails</STRONG> asserter or a regular expression to which hostname 
should match for <STRONG>hostregex</STRONG> asserter. In all cases hostnames should be 
assumed in lowercase. See more details about treatment
of hostname below. Default value is <EM>localhost</EM>.
<P></P>
<DT><STRONG><STRONG>onviolated-warn</STRONG></STRONG><BR>
<DD>
If <EM>1</EM>, the message specified with parameter <STRONG>onviolated-message</STRONG> is
printed before program is terminated in case condition about hostname is
not met. Default value is <EM>0</EM>.
<P></P>
<DT><STRONG><STRONG>onviolated-message</STRONG></STRONG><BR>
<DD>
Specifies the message to be printed in case condition about hostname is
not met.
The trailing newline will be automatically appended. 
Escape sequences are allowed.
Please be sure to quote the message properly in order the shell passed the
message as a single string. 
Default value is <EM>``Content-type: text/html\n\nThe script is not licensed to be run on this machine.''</EM>
<P></P>
<DT><STRONG><STRONG>onviolated-destroy</STRONG></STRONG><BR>
<DD>
If <EM>1</EM>, directs main module of the program to be destroyed in case
licensing conditions are not met. 
Default value is <EM>0</EM>.
<P></P>
<DT><STRONG><STRONG>source</STRONG></STRONG><BR>
<DD>
<a name=_hostname_source></a><P>The following sources of information are supported:</P>
<DL>
<DT><STRONG><A NAME="item_Sys%3A%3AHostname"><STRONG>Sys::Hostname</STRONG></A></STRONG><BR>
<DD>
This is a default source of information. Also it's used as a fallback when
other sources of information are used.
<P></P>
<DT><STRONG><A NAME="item_%2Fbin%2Fhostname"><STRONG>/bin/hostname</STRONG></A></STRONG><BR>
<DD>
Output of <EM>/bin/hostname</EM> (present in most Unix-like OSes) is used.
Please note that for most hosting providers it will be some name inside
hosting provider's domain - something like <EM>uk3.valuehost.com</EM> independant
of the name of the web server name; there are no guarantee that such internal
name of the server won't change. On the other hand, if one wants to license
some software for all clients of the particular hosting provider, it may
be a good idea to use this source of information.
<P></P>
<DT><STRONG><A NAME="item_%2Fbin%2Funame"><STRONG>/bin/uname</STRONG></A></STRONG><BR>
<DD>
Output of <EM>/bin/uname -n 2</EM> (present in most Unix-like OSes) is used.
Please note that for most hosting providers it will be some name inside
hosting provider's domain - something like <EM>uk3.valuehost.com</EM> independant
of the name of the web server name; there are no guarantee that such internal
name of the server won't change. On the other hand, if one wants to license
some software for all clients of the particular hosting provider, it may
be a good idea to use this source of information.
<P></P>
<DT><STRONG><A NAME="item_env_http_host"><STRONG>env_http_host</STRONG></A></STRONG><BR>
<DD>
The value of environment variable <EM>HTTP_HOST</EM> will be used as a name of
host; this variable is preset when program is serving dynamic web content. 
The value of this variable depends on the hostname the user requested - i.e.
if user visited <A HREF="http://www.site.com">http://www.site.com</A> then <EM>HTTP_HOST</EM> will be <EM>www.site.com</EM>, 
but if
user has visited <A HREF="http://site.com">http://site.com</A> then <EM>HTTP_HOST</EM> will be <EM>site.com</EM>, so
if both kinds URLs are to be supported than <STRONG>single-host</STRONG> asserter shouldn't
be used. Please note that it's easy to spoof arbitrary hostname by malicous
user by just prepending an assignment to this envirnment variable to the
protected script, so it's not very reliable source of information.
<P></P>
<DT><STRONG><A NAME="item_env_server_name"><STRONG>env_server_name</STRONG></A></STRONG><BR>
<DD>
The value of environment variable <EM>SERVER_NAME</EM> will be used as a name of
host; this variable is preset when program is serving dynamic web content. 
The value of this variable depends on the hostname the user requested - i.e.
if user visited <A HREF="http://www.site.com">http://www.site.com</A> then <EM>SERVER_NAME</EM> will be <EM>www.site.com</EM>, 
but if
user has visited <A HREF="http://site.com">http://site.com</A> then <EM>SERVER_NAME</EM> will be <EM>site.com</EM>, so
if both kinds URLs are to be supported than <STRONG>single-host</STRONG> asserter shouldn't
be used. Please note that it's easy to spoof arbitrary hostname by malicous
user by just prepending an assignment to this envirnment variable to the
protected script, so it's not very reliable source of information.
<P></P></DL>
<P>There is a plain CGI Perl script in <EM>lib/perl-obfus/print-hostname.pl</EM> 
in the directory where Perl-Obfus is installed that prints the value 
acquired by all sources of information.</P>
</DL>
<P>All hostname asserters differ only in treatment of the parameter <STRONG>matches</STRONG>.
The following hostname asserters are supported:</P>
<DL>
<DT><STRONG><A NAME="item_single%2Dhost"><STRONG>single-host</STRONG></A></STRONG><BR>
<DD>
The parameter <STRONG>matches</STRONG> is a single name of host with domain part, e.g.
<EM>uk3.valuehost.com</EM>.
<P></P>
<DT><STRONG><A NAME="item_hosttails"><STRONG>hosttails</STRONG></A></STRONG><BR>
<DD>
The parameter <STRONG>matches</STRONG> is a <STRONG>+</STRONG>-separated list of hostname tails
of host to match, e.g. <EM>valuehost.com+valuehost.co.uk</EM>.  Hosts with names
<EM>uk3.valuehost.com</EM> and <EM>support.valuehost.co.uk</EM> and even
<EM>ad.bestvaluehost.com</EM> will be considered as matching by this asserter.
<P></P>
<DT><STRONG><A NAME="item_hostregex"><STRONG>hostregex</STRONG></A></STRONG><BR>
<DD>
The parameter <STRONG>matches</STRONG> is a regular expression that host name should
match. Don't forget to insert acnhors <EM>^</EM> and <EM>$</EM> around it - they won't
be automatically appended and prepended. Don't forget to quote shell
special characters like <EM>*</EM> and <EM>$</EM> (or just enclose entire parameter
inside single quotes if on unix). E.g. the value <EM>[.]valuehost[.]</EM> of
parameter <STRONG>matches</STRONG> will make hosts with names 
<EM>www.valuehost.com</EM> and <EM>support.valuehost.co.uk</EM> as matching by this 
asserter, and host with name <EM>www.bestvaluehost.com</EM> and
<EM>www.valuehosters.com</EM>  won't be considered matching.
<P></P></DL>
<DT><STRONG><A NAME="item_%2DG_%3D_generic_asserters"><STRONG>-G</STRONG> = generic asserters</A></STRONG><BR>
<DD>
Generic asserters allow to insert custom checks and actions in the 
highly-protected block of code. There are no requirement on the code at all, 
no parsing of it is performed.
<DL>
<DT><STRONG><A NAME="item_asserter_from%2Dstring">asserter <STRONG>from-string</STRONG></A></STRONG><BR>
<DD>
This asserter has only one parameter - <STRONG>code</STRONG> - a string of custom code.
<P></P>
<DT><STRONG><A NAME="item_asserter_from%2Dfile">asserter <STRONG>from-file</STRONG></A></STRONG><BR>
<DD>
This asserter takes the code from file specified via <STRONG>filename</STRONG> parameter.
<P></P></DL>
<P>It's possible to use fake generic asserters with code <EM>' '</EM> (i.e. single
space character) to make the analysis of the program more complex (since in
case any asserter is used, some fraction of numeric expressions will be turned
to arithmetic expressions involving constant variables initialized in the
encoded block). This trick (passing <EM>-G from-string,code=' '</EM>) will make
custom decompiler one will have to write to be able to analyze the code 
much more complex.</P>
<P>In order to report violation of licensing conditions, user's code should
execute the following statements:</P>
<PRE>
 exit 0;</PRE>
</DL>
<DT><STRONG><A NAME="item_%2DO_profile%2Dparams"><STRONG>-O</STRONG> <EM>profile-params</EM></A></STRONG><BR>
<DD>
Tune the behaviour of the Perl-Obfus for some specific dialect or 
environment.
<P>The argument is <EM>profile-params</EM>, that has the following syntax:</P>
<P><EM>profile-name</EM>[,<EM>option</EM>=<EM>value</EM>]..</P>
<P>There are several profiles available. The profile is selected
by <EM>profile-name</EM>. Each
profile can have options that alter its behaviour, in order to specify
them the comma separated
<EM>option</EM>=<EM>value</EM> pairs may follow <EM>profile-name</EM> after a comma.</P>
<P>The following values for <EM>profile-name</EM> are available:</P>
<DL>
<DT><STRONG><A NAME="item_default"><EM>default</EM></A></STRONG><BR>
<DD>
Selects default Perl dialect.
<P></P></DL>
<P>The profile with name <EM>default</EM> is the default profile.</P>
<P>All profiles have the following options (specified in the way options
for manglers and extractors are specified):</P>
<DL>
<DT><STRONG><A NAME="item_handle%2Ddynamic%2Dscripts"><STRONG>handle-dynamic-scripts</STRONG></A></STRONG><BR>
<DD>
Specifies whether dynamic Perl code (the code generated on the fly)
should be obfuscated.
See the description of the option with the same name for <EM>asp</EM> extractor.
<P></P>
<DT><STRONG><A NAME="item_dynamic%2Dscripts%2Dby"><STRONG>dynamic-scripts-by</STRONG></A></STRONG><BR>
<DD>
Specifies names of objects and methods whoose arguments should be
scanned for dynamic Perl code. 
See the description of the option with the same name for <EM>asp</EM> extractor.
<P></P></DL>
</DL>
<P>
<HR>
<H1><A NAME="return value">RETURN VALUE</A></H1>
<P>In case of an error, the exit code will be non-zero, otherwise the
exit code will be zero.</P>
<P>
<HR>
<H1><A NAME="diagnostics">DIAGNOSTICS</A></H1>
<P>On successful processing of the file, the message  
'<EM><STRONG>input-filename</STRONG> syntax OK</EM>' to stderr. 
The processing will stop
if there is a syntax error in the file being obfuscated or in the file
it uses - in that case location and details of syntax error will be
printed to stderr.</P>
<P>
<HR>
<H1><A NAME="examples">EXAMPLES</A></H1>
<P>The following commandline obfuscates and encodes file <EM>blah.pl</EM> using default 
parameters and exceptions from file named <EM>./excepts</EM>, 
writing obfuscated and encoded version to <EM>oblah.pl</EM>:</P>
<PRE>
    perl-obfus blah.pl -o oblah.pl -x ./excepts</PRE>
<P>The following commandline is recommended way of obfuscating file 
<EM>blah.pl</EM> for shipping using default parameters and exceptions from file 
named <EM>./excepts</EM>, writing obfuscated and encoded version to <EM>oblah.pl</EM> (the main
difference from previous example is passing the value of the <STRONG>seed</STRONG> 
parameter for obfuscator routine for symbol names):</P>
<PRE>
    perl-obfus blah.pl -o oblah.pl -x ./excepts -i md5,seed=SomeRandomString</PRE>
<P>The following commandline is a recommended for producing the mildly-obfuscated
non-encoded version of the  <EM>blah.pl</EM> that is ideal for testing whether the obfuscated
code  has no problems like use of undefined symbols (that may arise due to
insufficiently complete list of exceptions in file <EM>./excepts</EM>) :</P>
<PRE>
    perl-obfus blah.pl -e 0 -o oblah.pl -x ./excepts -n none -s none -i prefix,str=ZZZ</PRE>
<P>The following commandlines are a sample of passing same set values for all options
to the <STRONG>md5</STRONG> obfuscator routine for symbol names. It obfuscates and encodes
file <EM>blah.pl</EM>, writing obfuscated and encoded version of the file to <EM>oblah.pl</EM>:</P>
<PRE>
    perl-obfus blah.pl -o oblah.pl -i md5,seed=57823,prefix=p,len=5
    perl-obfus blah.pl -o oblah.pl -i 'md5,prefix=p, seed=57823 , len=5'</PRE>
<P>The following example obfuscates and encodes file <EM>blah.pl</EM>, 
writing obfuscated and encoded version of the file to <EM>oblah.pl</EM>,
with embedding code for license checking that allows the code to be executed
itself till 28 April 2005; upon expiration
of the code default message is printed:</P>
<PRE>
    perl-obfus blah.pl -o oblah.pl 
        -T 'expire,whenexpires=28 April 2005,onviolated-warn=1' 
        -H hosttails,matches=site.com+.site.com,onviolated-warn=1</PRE>
<P>
<HR>
<H1><A NAME="files">FILES</A></H1>
<P>It's possible to store the default commandline options in the globally-visible
file <EM>$instroot/lib/perl-obfus/perl-obfus-settings.pl</EM> (where <STRONG>$instroot</STRONG>
is a directory in which the Perl-Obfus package was installed to) 
which is a Perl module. 
This file defines one sub <EM>cmnargs</EM> that should return a list of
options to  be prepended to actual commandline the perl-obfus, thus allowing to store
``persistent settings'' for perl-obfus. 
It is most useful for specifying 
the location of perl used for backend (that
should be a perl of version 5.7.2 or greater).</P>
<P>
<HR>
<H1><A NAME="caveats">CAVEATS</A></H1>
<P>Here is a list of mostly innocent caveats.</P>
<UL>
<LI>
<EM>__END__</EM> section becomes <EM>__DATA__</EM> in the output. Mostly it won't make any
difference to your code.
<P></P>
<LI>
<EM>__LINE__</EM> in the input file turns into line number (a numeric constant) 
in obfuscated file.
<P></P>
<LI>
The perl code in substitution part of <STRONG>s///e</STRONG> won't be obfuscated heavily -
only the identifiers will be mangled properly in order code to work correctly,
but no integer, string and whitespace mangling will be applied to the code.
<P></P>
<LI>
It's recommended to turn some perl warnings off for obfuscated files, since
due to jamming white space there will appear some constructs for which
perl will issue a warning.
<P></P></UL>
<P>
<HR>
<H1><A NAME="bugs">BUGS</A></H1>
<UL>
<LI>
With -jam=0 some obfuscated code does not work (gives syntax error due to 
strange sensitivity of perl to linebreaks). Better use -jam=1 with
-output_line_len=80 to get working and somewhat readable code.
<P></P>
<LI>
Constants implemented as subs may get inlined in the file
they are defined, and the sub definitions
theirself may disappear from the obfuscated file corresponding to the
file they were defined in (and the the values these subs return 
will be substituted in the places where these subs are invoked). To solve
this problem, just add a <EM>my</EM>-scoped list variables initialized with
the references to these subroutines.
<P></P>
<LI>
A class of problems may arise with the obfuscated code due to abnormal
sensitivity of perl parser to the extra white space.
The following subs act different due to features of (or bugs in)  perl parser:
<PRE>
    sub f { { &quot;blah&quot;
    , 2}; };
    sub g { { &quot;blah&quot;, 2}; };</PRE>
<P>Here <CODE>f()</CODE> returns integer 2, <CODE>g()</CODE> returns reference to anonymous hash - though
the difference is only in amount of whitespace (whether there is a newline
after ``blah''). Since perl-obfus removes extra whitespaces (and wraps line
in order it not to be longer that the constant you specified) the behaviour
of functions can change. You should not write the code that is sensitive to
whitespace and perl parser bugs in general - so you should add explicit return
in f and g if you want them to return ref to hash.</P>
<P></P></UL>
<P>See section <A HREF="#notes">NOTES</A> for troubleshooting instructions.</P>
<P>
<HR>
<H1><A NAME="notes">NOTES</A></H1>
<P>In most cases, once properly prepared for obfuscation, obfuscated version 
of the code should work the same as non-obfuscated. 
It's recommended to check
obfuscated version of the code for the use of undeclared subroutines
using <EM>find-undeclared-subs.pl</EM> script - this will help to detect incomplete
set of symbol name exceptions. 
After fixing the issues with incomplete
set of exceptions, it's recommended to check whether ofbuscated code behaves
exactly the same as original - by using pre-existing testsuite or 
checking functionality manually.</P>
<P>If some obfuscated code is syntaxically correct but works differently
than original version , 
obfuscate it without encoding and string, integer and ident mangling 
(but with -jam=1),  
as following:</P>
<PRE>
    perl-obfus -i none -s none -n none -jam 1 -e 0</PRE>
<P>Then try to run it again. If it still does not work correctly, find the source 
file which is guilty by replacing each of the obfuscated files with original
ones one by one. After you have found the file that contains the problem, 
append the definitions of all functions from the source file to that target
file and by temporary renaming function names in the appended part 
to something else (e.g. by suffixing 
the names with '1' or 'blah') you will
be able to find the function that is guilty. Same process can be applied to
the blocks in the guilty function too (just replace obfuscated parts with
source parts) to find out which part of the obfuscate function is misbehaving.</P>
<P>Having found the function block that misbehaves, that block should be
modified in order the obfuscated version to have the same functionality
as original code.</P>
<P>
<HR>
<H1><A NAME="see also">SEE ALSO</A></H1>
<P><EM>gen-ident-exceptions.pl</EM>, 
<EM>find-undeclared-subs.pl</EM>.</P>

