<!--#set var="title" value="Stunnix products documentation: Stunnix Perl Web Server configuration file settings reference" -->
<!--#include virtual="/h-ws.shtml" -->
<div class=curloc><span class=curloc><a 
    href=../../ class= nav>Support</a> &#8594;
<a href=../ class= nav>Documentation</a> &#8594;
<a href=. class= nav>Stunnix Perl Web Server</a>
</span></div>
<div class=body>
<h1>Configuration settings for Stunnix Perl Web Server</h1>
When SPWS is started and no configuration file was specified via commandline
option '--cfgfile', then 'httpd.conf' file is read from the directory where
srvrun.pl script is located. It's possible to request SPWS to read several
configuration files at startup by using commandline options, and passing
configuration file statements directly via commandline is also possible - 
see more information in 
<a href=srvcmdline.shtml>supported commandline options</a>.

<p>
The syntax of configuration files resembles syntax of famous and most 
widely-spread <a href=http://httpd.apache.org>Apache</a> web server:
<ul>
<li>Each setting occupies exactly one line
<li>Empty lines are ignored
<li>Everything after a hash sign ('#') is ignored on each line
<li>Later setting overrides previous one
</ul>
<p>
Here is a sample configuration file:
<pre class=bigtext>
#global settings
Port 8002 		#port to listen on for http connections
host 127.0.0.1		#IP address to listen on
Portctl 8001		#port to listen on for control connections from slaves

MaxSlaves 1		#number of slave processes for execution of (x)CGI 
			#scripts
ErrorLog logs/error_log		#location for error log file
AccessLog logs/access_log	#location for access log file
DontLog 1		#whether not to log anything at all

DocRoot /var/www/html	#Path to the WWW document root

#builtin types are reasonable, but if you need, specify filename here
MimeTypesSource /dev/null #'/dev/null' is treated special and means
                        # "don't read from any file, use internal defaults"

#note: to get name of the module, mod_xcgi =&gt; ws::mod::xcgi
HandleTypes mod_xcgi    script/xcgi	#treat as XCGI script
HandleTypes mod_cgi     script/cgi	#treat as CGI script
HandleTypes mod_cgi_pl  script/cgi-perl #treat as perl CGI script
HandleTypes mod_ssi     sendfile/ssi	#process Server Side Includes
HandleTypes mod_asis    sendfile/asis	#send file as is



#All supported settings that can be specified on per-location basis are below.
#All supported settings that must be specified global-wise (not inside any
#Location section) are above.
&lt;Location /&gt;
DirectoryIndex index.shtml index.shtm index.html index.htm #order in which
		    #to lookup documents when document with path that 
		    #corresponds to the directory is requested

AddHandler script/xcgi xcgi xpl #handle .xpl and .xcgi files using mod_xcgi
AddHandler script/cgi-perl cgi 
AddHandler script/cgi exe
AddHandler sendfile/ssi shtml
AddHandler sendfile/asis DEFAULT 	#special kind of extensions - 'DEFAULT' 
					#means "any other extension"


#example of setting headers for a given location:
Set 	Header Expires "1 jan 2010"  #set value of http-header 'Expires'
		#to "1 jan 2010", signaling the browser not to refetch anything
		#loaded below "/".
UnSet 	Header Blah  	#Don't set http header named "Blah". Useful for
		#making exceptions for e.g. (X)CGI scripts

#example of setting environment variables for a given location
Set  	Env MyVar "blah1"
		#Note:value is always in double quotes, even if value doesn't
		#contain spaces..
Unset 	Env MyVar2 #Unset variable named MyVar2 for this location

&lt;/Location&gt;


#example of setting header for particular script. Since this Location section
#is after the all-catching section for Location "/", the settings below will
#override settings set in  section for Location "/".
&lt;Location /scripts/login.xpl &gt;
Set 	Header Expires "1 jan 1970"  
		#set value of http-header 'Expires' to 
		#date in the past, forcing browser to refetch the resource
		#and not to store it in its internal cache
&lt;/Location&gt;

#example of setting header for files with names matching specific Perl regular
#expression. Regular expression has to be enclosed in double quotes!
&lt;LocationMatch "\.css$" &gt;
Set 	Option handleby "/themer.xpl"  
	    #filename of handler has to be enclosed in double quotes!

	    #Make all .css files to be transparently generated by a
	    #script - e.g. to allow themeing
&lt;/LocationMatch&gt;

</pre>
<p>
Some settings can be specific to some site location, some settings are global
(like Port to listen on). If one wants to make group of settings specific to
some location of the site, one has to enclose that group of settings into 
a section starting with &lt;Location, then listing name of location
(relative to site root), then appending &gt; and newline, and ending group
of settings with &lt;/Location&gt; on a separate line; see example above
for illustration. Also it's possible to apply settings to resources with
URI matching some specific Perl regular expression by the use of 
LocationMatch, see example above for more information.
<p>
Names of settings are case-insensitive.

<h2>Global settings</h2>
These settings can't be specified inside section specific to some location
(grouped by their purpose):
<ul>
<li><a href=#host>Host</a>
<li><a href=#port>Port</a>
<li><a href=#portctl>Portctl</a>
<li><a href=#docroot>DocRoot</a>
<li><a href=#maxslaves>MaxSlaves</a>
<li><a href=#dontlog>DontLog</a>
<li><a href=#accesslog>AccessLog</a>
<li><a href=#errorlog>ErrorLog</a>
<li><a href=#mimetypesource>MimeTypesSource</a>
<li><a href=#handletypes>HandleTypes</a> 
</ul>

<h2>Settings that can be specified on per-location basis</h2>
These settings can be specified inside section specific to some location
(listed grouped by their purpose):
<ul>
<li><a href=#directoryindex>DirectoryIndex</a> 
<li><a href=#addhandler>AddHandler</a> 
<li><a href=#set_header>Set Header</a> 
<li><a href=#unset_header>UnSet Header</a> 
<li><a href=#set_env>Set Env</a> 
<li><a href=#unset_env>UnSet Env</a> 
<li><a href=#set_option>Set Option</a> 
<li><a href=#unset_option>UnSet Option</a> 
</ul>

<h2>Description of global settings</h2>
<h3>Host</h3><a name=host></a>
Specify IP address to open listening socket on. In most cases 127.0.0.1
is the best choice.

<h3>Port</h3><a name=port></a>
Port to listen for incoming http connections.

<h3>PortCtl</h3><a name=portctl></a>
Port number for communication with slaves.

<h3>DocRoot</h3><a name=docroot></a>
Root of the site. Should end with '/'!

<h3>MaxSlaves</h3><a name=maxslaves></a>
Maximum number of slave processes to start. CGI and XCGI scripts are
executed by or inside slave processes, so the value effectively limits 
number of CGI or XCGI scripts that can be executed at any single moment
of time. Even when all slaves are busy executing CGI or XCGI, SPWS
can serve static content. Default value is 1.

<h3>DontLog</h3><a name=dontlog></a>
Whether log files are not produced at all. Default value is 1.

<h3>AccessLog</h3><a name=accesslog></a>
Name of file to save log of all accesses to. Logfile has format similar
to apache, but not fully compatible with Apache logfile format (since some
fields are meaningless). Default value is logs/access_log.

<h3>ErrorLog</h3><a name=errorlog></a>
Name of file to save log of all errors to. 
Default value is logs/error_log.

<h3>MimeTypesSource</h3><a name=mimetypessource></a>
Specifies file name to parse for mime type mapping. SPWS already has
entries for most typically used extensions, so there is no need to 
extend it. In case one will need to add additional mappings, then
the file referenced by this directive should contain lines looking like this:
<pre>
video/mpeg mpeg mpe mpg
</pre>
- i.e. mime-type name, and list of file extensions, without dots.

<h3>HandleTypes</h3><a name=handletypes></a>
This directive specifies mapping between SPWS module name and a tag,
that can be later used in <a href=#addhandler>AddHandler</a> for specifying
how to handle files of a given extension. E.g. sample line
<pre>
HandleTypes mod_xcgi    script/xcgi     
</pre>
specifies that extensions tagged with <tt>script/xcgi</tt> are to be
handled by <tt>mod_xcgi</tt>. Later you can add the following lines to
specify set of extensions to be handled by <tt>mod_xcgi</tt>:
<pre>
AddHandler script/xcgi xcgi xpl 
</pre>

That tag can be arbitrary string. The module name can be one of the following:
<ul>
<li>mod_xcgi - treat file as XCGI script
<li>mod_cgi -  treat file as CGI script. For Perl scripts, use mod_cgi_pl
	module since it turns on special support like correctly passing
	name of interpreter, avoiding console window on Windows9x, etc.
<li>mod_cgi_pl -  treat file as CGI script written in Perl (and thus requiring
    Perl interpreter to execute). For Perl scripts, use mod_cgi_pl
    module since it turns on special support like correctly passing
    name of interpreter, avoiding console window on Windows9x, etc.
<li>mod_ssi - enable Server Side Includes in the served content.
<li>mod_asis - deliver content as-is.
</ul>

<h2>Description of settings that can be specified on per-location basis</h2>
<h3>DirectoryIndex</h3><a name=directoryindex></a>
This directive specifies space-separated list of filenames to try to find in 
the directory
when the resource that maps to directory is requested. 
Example:
<pre>
DirectoryIndex index.shtml index.shtm index.html index.htm 
</pre>
E.g. for this sample line if request
for <tt>/foo/</tt> is arrived, and there is a directory named 'foo' below
document root, SPWS will try to load foo/index.shtml, in case of
absence of it SPWS will try to load foo/index.shtm, and so on.
In case entire list was tried but file not found, SPWS will return an error.
Serving directory indexes (as apache's mod_autoindex does) is not and
won't be supported by SPWS.


<h3>AddHandler</h3><a name=addhandler></a>
This directive specifies tag to bind to a space-separated list of dot-less 
file extensions. Sample:
<pre>
AddHandler script/xcgi xcgi xpl 
</pre>
The tag (<tt>script/xcgi</tt> here) should be bound to some SPWS module
using <a href=#handletypes>HandleTypes</a> directive.

<h3>Set Header</h3><a name=set_header></a>
This directive sets the value of a specified HTTP header to a specified
value. In the following example:
<pre>
Set     Header Expires "1 jan 2010"
</pre>
the header 'Expires' is assigned a value of "1 jan 2010". The value should
always be in quotes.

<h3>UnSet Header</h3><a name=unset_header></a>
This directive unsets  the specified HTTP header. Example:
<pre>
UnSet   Header X-Blah
</pre>
This unsets HTTP header <tt>X-Blah</tt>.

<h3>Set Env</h3><a name=set_env></a>
This directive sets value of specified environment variable to the specified
value. 
In the following example:
<pre>
Set     Env DBNAME "empdb"
</pre>
the environment variable 'DBNAME' is assigned a value of "empdb". 
The value should always be in quotes.
<p>
The variables set this way are  accessible by the SSI directives and
CGI and XCGI scripts. This is a handy way of passing some pieces
of configuration information to them.

<h3>UnSet Env</h3><a name=unset_env></a>
This directive unsets the specified environment variable. Example:
<pre>
UnSet Env DBNAME
</pre>

<h3>Set Option</h3><a name=set_option></a>
This directive sets value of specified option variable to the specified
value. 
In the following example:
<pre>
Set     Option handleby "/themer.xpl"
</pre>
the option 'handleby' is assigned a value of "/themer.xpl". 
The value should always be in double quotes.
<p>
The only option supported so far is 'handleby'.

<h3>UnSet Option</h3><a name=unset_option></a>
This directive unsets the specified option. Example:
<pre>
UnSet Option handlebby
</pre>

<!--#include virtual="/f.shtml" -->
